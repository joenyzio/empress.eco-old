{"v":"5.7.11","fr":25,"ip":0,"op":151,"w":350,"h":350,"nm":"Comp 43","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Layer 13","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[171.683,173.234,0],"ix":2,"l":2},"a":{"a":0,"k":[26.683,-36.766,0],"ix":1,"l":2},"s":{"a":1,"k":[{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":107,"s":[0,0,100]},{"t":117,"s":[150,150,100]}],"ix":6,"l":2,"x":"var $bm_rt;\nvar fx = effect('ŝlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;"}},"ao":0,"ef":[{"ty":5,"nm":"ŝlosilo pli pura","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":1,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]}],"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-1.239,0.715],[-0.004,-1.423],[1.239,-0.715],[0.004,1.425]],"o":[[1.239,-0.715],[0.004,1.425],[-1.239,0.715],[-0.004,-1.423]],"v":[[27.498,-47.779],[29.75,-46.497],[27.513,-42.621],[25.26,-43.905]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.6471,0.0431,0.5373,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-1.424,-0.828],[0,0],[0.006,2.246],[-2.677,1.546],[0,0],[-0.009,-3.076]],"o":[[0,0],[-1.424,-0.828],[-0.009,-3.076],[0,0],[-2.677,1.546],[0.006,2.246]],"v":[[26.552,-37.281],[24.908,-38.237],[21.014,-43.065],[25.846,-51.433],[27.49,-50.477],[22.658,-42.11]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.6471,0.0431,0.5373,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-2.677,1.546],[-0.009,-3.076],[0.242,-0.393],[0.009,3.076]],"o":[[2.677,-1.545],[0.009,3.076],[-0.243,-0.113],[-0.009,-3.076]],"v":[[27.49,-50.477],[32.352,-47.707],[27.529,-36.766],[22.658,-42.11]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0.38,0.8863,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.881,-0.512],[0,0],[1.347,-0.778],[0,0]],"o":[[0,0],[-0.881,-0.512],[0,0],[1.347,-0.778]],"v":[[29.295,-51.77],[30.939,-50.815],[27.49,-50.477],[25.846,-51.433]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.6471,0.0431,0.5373,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":1,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"Layer 12","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[211.683,138.234,0],"ix":2,"l":2},"a":{"a":0,"k":[26.683,-36.766,0],"ix":1,"l":2},"s":{"a":1,"k":[{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":97,"s":[0,0,100]},{"t":107,"s":[150,150,100]}],"ix":6,"l":2,"x":"var $bm_rt;\nvar fx = effect('ŝlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;"}},"ao":0,"ef":[{"ty":5,"nm":"ŝlosilo pli pura","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":1,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]}],"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-1.239,0.715],[-0.004,-1.423],[1.239,-0.715],[0.004,1.425]],"o":[[1.239,-0.715],[0.004,1.425],[-1.239,0.715],[-0.004,-1.423]],"v":[[27.498,-47.779],[29.75,-46.497],[27.513,-42.621],[25.26,-43.905]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.6471,0.0431,0.5373,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-1.424,-0.828],[0,0],[0.006,2.246],[-2.677,1.546],[0,0],[-0.009,-3.076]],"o":[[0,0],[-1.424,-0.828],[-0.009,-3.076],[0,0],[-2.677,1.546],[0.006,2.246]],"v":[[26.552,-37.281],[24.908,-38.237],[21.014,-43.065],[25.846,-51.433],[27.49,-50.477],[22.658,-42.11]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.6471,0.0431,0.5373,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-2.677,1.546],[-0.009,-3.076],[0.242,-0.393],[0.009,3.076]],"o":[[2.677,-1.545],[0.009,3.076],[-0.243,-0.113],[-0.009,-3.076]],"v":[[27.49,-50.477],[32.352,-47.707],[27.529,-36.766],[22.658,-42.11]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0.38,0.8863,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.881,-0.512],[0,0],[1.347,-0.778],[0,0]],"o":[[0,0],[-0.881,-0.512],[0,0],[1.347,-0.778]],"v":[[29.295,-51.77],[30.939,-50.815],[27.49,-50.477],[25.846,-51.433]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.6471,0.0431,0.5373,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":1,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"Layer 11","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[151.683,98.234,0],"ix":2,"l":2},"a":{"a":0,"k":[26.683,-36.766,0],"ix":1,"l":2},"s":{"a":1,"k":[{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":87,"s":[0,0,100]},{"t":97,"s":[150,150,100]}],"ix":6,"l":2,"x":"var $bm_rt;\nvar fx = effect('ŝlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;"}},"ao":0,"ef":[{"ty":5,"nm":"ŝlosilo pli pura","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":1,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]}],"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-1.239,0.715],[-0.004,-1.423],[1.239,-0.715],[0.004,1.425]],"o":[[1.239,-0.715],[0.004,1.425],[-1.239,0.715],[-0.004,-1.423]],"v":[[27.498,-47.779],[29.75,-46.497],[27.513,-42.621],[25.26,-43.905]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.6471,0.0431,0.5373,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-1.424,-0.828],[0,0],[0.006,2.246],[-2.677,1.546],[0,0],[-0.009,-3.076]],"o":[[0,0],[-1.424,-0.828],[-0.009,-3.076],[0,0],[-2.677,1.546],[0.006,2.246]],"v":[[26.552,-37.281],[24.908,-38.237],[21.014,-43.065],[25.846,-51.433],[27.49,-50.477],[22.658,-42.11]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.6471,0.0431,0.5373,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-2.677,1.546],[-0.009,-3.076],[0.242,-0.393],[0.009,3.076]],"o":[[2.677,-1.545],[0.009,3.076],[-0.243,-0.113],[-0.009,-3.076]],"v":[[27.49,-50.477],[32.352,-47.707],[27.529,-36.766],[22.658,-42.11]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0.38,0.8863,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.881,-0.512],[0,0],[1.347,-0.778],[0,0]],"o":[[0,0],[-0.881,-0.512],[0,0],[1.347,-0.778]],"v":[[29.295,-51.77],[30.939,-50.815],[27.49,-50.477],[25.846,-51.433]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.6471,0.0431,0.5373,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":1,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":4,"ty":4,"nm":"Layer 10","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[177.019,109.839,0],"ix":2,"l":2},"a":{"a":0,"k":[12.019,-25.161,0],"ix":1,"l":2},"s":{"a":1,"k":[{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":87,"s":[0,0,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":99,"s":[100,100,100]},{"t":131,"s":[0,0,100]}],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[13.991,-22.52],[32.352,-25.161],[13.991,-27.802],[12.019,-52.63],[10.047,-27.802],[-8.314,-25.161],[10.047,-22.52],[12.019,2.308]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":5,"ty":3,"nm":"Null 50","sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[175,175,0],"ix":2,"l":2},"a":{"a":0,"k":[50,50,0],"ix":1,"l":2},"s":{"a":0,"k":[130,130,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":6,"ty":4,"nm":"Layer 7","td":1,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[180.483,125.371,0],"ix":2,"l":2},"a":{"a":0,"k":[4.218,-38.176,0],"ix":1,"l":2},"s":{"a":1,"k":[{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":38,"s":[0,0,100]},{"t":62,"s":[130,130,100]}],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-9.97],[0.6,-2.86],[0.51,-1.56],[0.17,-0.41],[0,0],[0.17,-0.45],[0.3,-0.64],[0.24,-0.45],[0.08,-0.17],[0.49,-0.79],[0.42,-0.64],[0.24,-0.3],[0.25,-0.35],[0.25,-0.32],[0.56,-0.62],[0.02,-0.02],[0.84,-0.77],[0.22,-0.22],[0.08,-0.04],[11.7,0],[5.59,2.48],[0.05,0.02],[1.84,1.17],[0.24,0.15],[0.06,0.08],[0.13,0.09],[0.02,0.02],[2.83,3.66],[0.87,1.48],[1.07,3.34],[0.32,1.63],[0,2.97],[-0.3,2.03],[-0.06,0.4],[0,0],[-0.04,0.28],[-8.1,6.51],[-0.43,0.33],[0,0],[-0.13,0.11],[-1.46,0.81],[-0.53,0.28],[-0.13,0.06],[-0.36,0.15],[-2.03,0.62],[-0.38,0.09],[-0.19,0.05],[-0.38,0.09],[-0.13,0.02],[-0.67,0.11],[-0.07,0],[-0.19,0.04],[0,0],[-0.15,0.02],[-2.31,0],[-2.07,-0.32],[-1.18,-0.3],[-0.58,-0.15],[-0.57,-0.17],[-0.52,-0.17],[-0.6,-0.25],[-0.55,-0.26],[-0.42,-0.21],[-0.02,-0.02],[-0.15,-0.09],[-0.47,-0.25],[-0.5,-0.32],[-1.39,-1.07],[0,0],[-1.05,-1],[-0.88,-1.04],[-0.11,-0.18],[-0.41,-0.56],[-0.2,-0.3]],"o":[[0,3.01],[-0.32,1.65],[-0.13,0.43],[0,0],[-0.15,0.45],[-0.26,0.68],[-0.22,0.47],[-0.08,0.17],[-0.43,0.84],[-0.39,0.67],[-0.2,0.3],[-0.21,0.34],[-0.26,0.34],[-0.52,0.64],[0,0.04],[-0.77,0.86],[-0.21,0.24],[-0.06,0.04],[-7.96,7.39],[-6.48,0],[-0.04,-0.05],[-2.01,-0.88],[-0.24,-0.13],[-0.06,-0.04],[-0.13,-0.07],[-0.04,-0.02],[-3.81,-2.63],[-1.04,-1.35],[-1.78,-2.95],[-0.52,-1.56],[-0.55,-2.82],[0,-2.12],[0.04,-0.43],[0,0],[0.06,-0.26],[2.01,-10.63],[0.43,-0.36],[0,-0.02],[0.13,-0.1],[1.34,-0.98],[0.51,-0.3],[0.13,-0.06],[0.34,-0.19],[1.89,-0.92],[0.38,-0.11],[0.2,-0.08],[0.39,-0.1],[0.13,-0.04],[0.64,-0.17],[0.06,-0.02],[0.17,-0.04],[0,0],[0.15,-0.04],[2.2,-0.35],[2.14,0],[1.22,0.15],[0.58,0.13],[0.58,0.15],[0.52,0.15],[0.62,0.21],[0.56,0.24],[0.41,0.19],[0.03,0],[0.15,0.07],[0.47,0.23],[0.51,0.28],[1.52,0.9],[0,0],[1.16,0.87],[0.98,0.92],[0.17,0.18],[0.47,0.53],[0.21,0.26],[5.56,7.4]],"v":[[49.018,-38.151],[48.118,-29.301],[46.858,-24.461],[46.408,-23.221],[46.408,-23.201],[45.918,-21.871],[45.088,-19.881],[44.418,-18.491],[44.168,-17.981],[42.798,-15.521],[41.578,-13.571],[40.928,-12.651],[40.208,-11.621],[39.438,-10.621],[37.848,-8.711],[37.808,-8.631],[35.388,-6.151],[34.748,-5.501],[34.558,-5.381],[4.218,6.479],[-13.992,2.629],[-14.142,2.539],[-19.872,-0.581],[-20.582,-1.011],[-20.812,-1.181],[-21.182,-1.401],[-21.262,-1.461],[-31.282,-10.941],[-34.182,-15.201],[-38.462,-24.631],[-39.732,-29.451],[-40.582,-38.151],[-40.112,-44.401],[-39.942,-45.641],[-39.942,-45.661],[-39.792,-46.481],[-23.922,-72.881],[-22.612,-73.911],[-22.592,-73.931],[-22.222,-74.231],[-18.032,-76.921],[-16.472,-77.781],[-16.082,-77.971],[-15.042,-78.481],[-9.152,-80.791],[-7.982,-81.121],[-7.382,-81.291],[-6.202,-81.591],[-5.792,-81.671],[-3.822,-82.081],[-3.652,-82.121],[-3.122,-82.231],[-3.032,-82.231],[-2.582,-82.311],[4.218,-82.831],[10.548,-82.361],[14.148,-81.691],[15.898,-81.271],[17.628,-80.771],[19.178,-80.281],[20.988,-79.581],[22.638,-78.871],[23.898,-78.271],[23.968,-78.251],[24.398,-78.031],[25.808,-77.291],[27.328,-76.411],[31.688,-73.431],[31.708,-73.411],[35.028,-70.591],[37.878,-67.621],[38.278,-67.141],[39.588,-65.541],[40.188,-64.751]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.802,0.88,0.958,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":7,"ty":4,"nm":"Layer 6","tt":1,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.671,"y":0},"t":38,"s":[-29.313,123.424,0],"to":[69.333,0,0],"ti":[-69.333,0,0]},{"t":87,"s":[386.687,123.424,0]}],"ix":2,"l":2,"x":"var $bm_rt;\nvar fx = effect('ŝlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;"},"a":{"a":0,"k":[162.836,-39.674,0],"ix":1,"l":2},"s":{"a":0,"k":[130,130,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"ŝlosilo pli pura","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":1,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]}],"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.387,-0.242],[0.847,-0.629],[-0.678,-0.799],[-0.024,-0.145],[0.847,-0.073],[0.508,-0.097],[-0.194,-0.654],[2.106,-0.29],[0.581,-0.194],[0.557,-0.073],[0.242,-0.024],[0.363,-1.307],[0.024,-0.024],[0.532,-0.557],[0.193,0.121],[0.145,0.048],[1.017,1.017],[0.17,0.266],[0.363,0.605],[0.266,0.605],[-0.533,0.726],[0.557,-0.194],[3.05,-0.121],[0,0],[0.992,-0.121],[0.242,0.145],[0.532,0.266],[-0.557,1.017],[-0.992,0.944],[-1.307,-0.097],[-0.121,0],[-0.823,2.033],[-0.46,-0.291],[-1.549,0],[-1.234,0],[-2.614,0.024],[-0.266,-1.041],[-1.476,1.138],[-0.992,-0.339],[-0.266,-0.169]],"o":[[-0.823,0.605],[-0.532,0.436],[0.096,0.097],[0.121,0.847],[-0.387,0.048],[0.194,0.605],[-1.864,0.944],[-0.629,0.073],[-0.532,0.193],[-0.266,0.024],[-0.992,0.097],[0,0.024],[-0.194,0.678],[-0.17,0.218],[-0.145,-0.048],[-1.331,-0.363],[-0.193,-0.169],[-0.363,-0.605],[-0.363,-0.581],[-0.121,-0.266],[-0.557,0.121],[-0.798,-2.493],[0,0],[-0.969,0.048],[-0.242,0],[-0.605,-0.339],[1.21,-0.533],[0.847,-1.501],[0.823,-0.75],[0.145,0.024],[2.033,0.218],[0.387,0.218],[0.968,-1.718],[1.234,-0.024],[2.614,-0.024],[1.477,0],[0.484,1.767],[0.823,-0.629],[0.242,0.073],[-0.484,0.387]],"v":[[339.327,-83.602],[336.737,-81.787],[336.471,-80.141],[336.64,-79.73],[334.994,-77.551],[333.76,-77.309],[334.268,-75.567],[328.217,-73.8],[326.426,-73.146],[324.805,-72.638],[324.03,-72.566],[321.78,-70.968],[321.755,-70.92],[320.376,-69.153],[319.577,-68.79],[319.165,-68.911],[315.414,-70.508],[314.857,-71.186],[313.768,-73.001],[312.8,-74.816],[313.986,-76.511],[312.243,-76.027],[306.677,-79.463],[306.653,-79.463],[303.724,-79.1],[302.95,-79.415],[301.207,-80.407],[304.982,-82.174],[308.323,-84.377],[312.316,-84.885],[312.679,-84.861],[315.608,-86.603],[316.769,-85.829],[320.957,-87.378],[324.66,-87.45],[332.526,-87.523],[334.559,-85.321],[337.197,-84.425],[339.835,-84.933],[340.609,-84.57]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[1.912,0.896],[0,0.024],[0.024,0.073],[0.097,0.218],[-0.242,0],[-1.21,-0.048],[-0.75,-0.169]],"o":[[0,0],[-0.048,-0.073],[-0.097,-0.291],[0.291,-0.097],[1.234,0],[0.484,0.097],[-2.033,1.67]],"v":[[334.195,-71.501],[334.123,-71.549],[333.978,-71.767],[333.711,-72.541],[334.535,-72.856],[338.238,-72.783],[339.956,-72.324]],"c":true},"ix":2},"nm":"Path 2","mn":"ADBE Vector Shape - Group","hd":false},{"ind":2,"ty":"sh","ix":3,"ks":{"a":0,"k":{"i":[[0.242,0],[0.242,0.024],[0.121,0],[0.411,0.048],[-0.532,0],[-0.072,-0.024],[-0.024,0],[-0.024,0],[-0.121,-0.024],[-0.073,-0.097],[-0.048,-0.048],[0,0],[-0.048,-0.048],[-0.048,-0.048],[-0.048,-0.145]],"o":[[-0.291,-0.024],[-0.121,0],[-0.388,-0.024],[0.508,-0.605],[0.121,0],[0.024,0],[0.024,0.048],[0.073,0],[0.073,0.097],[0.048,0.073],[0,0],[0.048,0.024],[0.048,0.073],[0.073,0.097],[-0.266,-0.048]],"v":[[302.514,-40.86],[301.667,-40.932],[301.304,-40.957],[300.094,-41.102],[301.691,-42.022],[302.054,-41.997],[302.151,-41.949],[302.272,-41.876],[302.514,-41.804],[302.78,-41.538],[302.926,-41.392],[302.926,-41.344],[303.047,-41.223],[303.167,-41.078],[303.313,-40.763]],"c":true},"ix":2},"nm":"Path 3","mn":"ADBE Vector Shape - Group","hd":false},{"ind":3,"ty":"sh","ix":4,"ks":{"a":0,"k":{"i":[[0.46,0.169],[0.314,0.097],[0.097,0.048],[0.29,0.048],[0.073,0.073],[0.387,0.097],[0.048,0.024],[-0.048,0],[-1.234,-0.629],[-0.726,-0.629]],"o":[[-0.339,-0.073],[-0.121,-0.048],[-0.314,-0.097],[-0.073,-0.024],[-0.435,-0.097],[-0.048,-0.024],[0.048,-0.024],[0.75,-0.436],[0.654,0.315],[-0.485,-0.169]],"v":[[297.504,-42.699],[296.488,-42.966],[296.149,-43.087],[295.253,-43.329],[295.035,-43.425],[293.849,-43.764],[293.704,-43.813],[293.825,-43.885],[296.875,-43.619],[298.957,-42.191]],"c":true},"ix":2},"nm":"Path 4","mn":"ADBE Vector Shape - Group","hd":false},{"ind":4,"ty":"sh","ix":5,"ks":{"a":0,"k":{"i":[[0.242,1.041],[1.234,2.638],[0.435,-0.266],[1.67,-0.46],[0.992,1.016],[1.162,0.871],[0.17,-0.218],[-1.186,-0.968],[0.097,-0.29],[0.944,0.581],[0.242,0.363],[1.307,0.992],[0.242,-0.242],[1.017,-0.992],[0.484,-0.169],[0.532,-0.145],[0.46,0.121],[-0.46,1.113],[0.073,0.411],[-0.895,-0.024],[-0.895,0.097],[-0.048,0.387],[0.363,0.436],[0.678,0.339],[-1.549,0.46],[1.235,1.501],[-0.46,0.605],[0.532,0.169],[0.218,-0.145],[0.726,-0.363],[-0.218,0.339],[-0.581,0.363],[-0.097,0.097],[0.121,0.339],[-0.435,0],[-0.024,-0.242],[-0.798,-1.186],[-0.654,0.315],[-0.944,0.46],[-1.597,-0.073],[-1.114,0.024],[-1.67,0],[-1.38,-0.242],[0.847,1.162],[0.823,-0.339],[-0.363,-0.29],[2.276,0.121],[0.266,0.605],[0.072,-0.024],[0.726,0.605],[-0.121,0.557],[-0.605,0.363],[-1.234,0.823],[-0.46,0.412],[0.17,0.169],[1.041,0.992],[0,0],[1.718,1.016],[0.581,0.315],[0.532,0.266],[0.17,0.073],[0.024,0],[0.46,0.218],[0.629,0.266],[0.726,0.242],[0.557,0.193],[0.654,0.169],[0.654,0.145],[1.38,0.194],[2.13,0.024],[0.314,0],[2.541,-0.411],[0.145,-0.024],[0,0],[0.194,-0.048],[0.072,-0.024],[0.726,-0.169],[0.145,-0.048],[0.436,-0.121],[0.217,-0.097],[0.435,-0.121],[2.13,-1.041],[0.387,-0.218],[0.145,-0.073],[0.581,-0.339],[1.525,-1.113],[-0.073,-0.097],[0.266,-0.097],[0.484,-0.412],[-1.961,-0.726],[-1.016,-0.315],[-0.557,-0.242],[-0.145,-0.702],[-0.218,-0.121],[-1.065,-0.363],[1.282,-0.363],[-0.508,-0.532],[0.121,-0.169],[1.331,0.242],[0.508,0.073],[0.798,0.169],[0.29,0.169],[-0.242,0.097],[-0.919,0.315],[0.048,0.266],[0.847,-0.242],[-0.17,0.557],[0,0],[-0.363,-0.605],[1.259,-0.194],[-1.186,-0.436],[0.024,-0.097],[1.38,0.073],[0.242,0.315],[0.363,-0.145],[1.089,-0.702],[-1.113,-0.508],[-1.839,-0.315],[-0.557,-1.452],[-0.314,0.024],[0.024,0.266],[0.073,0.363],[-0.291,0.363],[0.266,0.387],[-1.137,-0.097],[-0.387,-0.073],[-0.992,-0.218],[-1.984,1.525],[-1.379,-1.113],[-0.266,-0.218],[-0.411,-0.315],[0.242,-0.411],[-0.121,-0.073],[-0.654,-0.46],[0.145,-0.073],[0,0],[-0.121,0.169],[-0.484,0.847],[0.291,-0.121],[0.944,-0.387],[0.194,0.121],[1.283,-1.477],[-0.412,0.024],[-0.217,-0.073],[-0.024,-0.073],[-0.992,0],[-0.193,-0.193],[-0.169,-0.145],[0.339,-0.097],[0.654,0.944],[0.46,-0.145],[0.048,-0.726],[-0.073,-0.387],[0.217,0],[1.065,-0.629],[0.46,-0.46],[0.678,-0.436],[-0.363,-0.823],[-0.072,-0.266],[-0.17,-0.629],[0.17,-0.073],[0.217,0.315],[0.266,0.363],[0.411,0.194],[2.154,0.557],[0.121,-0.048],[0.145,-1.452],[-1.113,-0.654],[-0.218,0.774],[-0.678,-0.242],[0.194,-0.605],[0.024,-0.557],[0,-0.097],[-0.532,0.024],[0.145,-0.968],[0.024,-0.048],[-0.17,-0.484],[-0.266,0],[-0.266,0.048],[-0.798,-0.508],[-0.315,0.194],[-1.065,0.75],[0,0],[-0.145,-0.145],[-1.743,-0.871],[0,-0.266],[-0.411,-0.436],[-0.944,0.121],[-0.653,-0.581],[-0.145,-0.581],[-0.508,-0.097],[-2.493,-1.21],[0.532,-1.041],[0.532,-0.944],[0.17,-0.411],[0.025,-0.266],[1.065,-1.186],[0.726,-0.339],[0.654,-0.46],[-0.048,-0.363],[0.654,-0.702],[0.17,-0.121],[0.097,-0.194],[1.743,0.218],[1.743,0.048],[0.097,-0.992],[0,0],[-0.217,-0.387],[0.726,-0.75],[-0.532,-0.339],[0.557,-0.46],[-0.46,-0.581],[-6.244,0],[-8.108,5.518],[-1.864,1.694],[-0.048,0.048],[-0.17,0.194],[-0.919,1.065],[0,0.024],[-0.363,0.508],[0.121,0.169],[-0.024,0.411],[0.775,1.718],[-1.283,1.21],[0.121,0.169],[1.621,1.283],[-0.46,1.452],[0.17,0.121],[0.315,-0.169],[0.581,0.726],[0.411,-0.169],[1.864,0.145],[0.121,-0.121],[0.557,0.605],[1.38,0.823],[-0.363,0.726],[-0.291,1.67],[-1.767,0.823],[-0.121,0.654],[-1.355,0.266],[-2.904,0.411],[-0.435,-0.387],[0,-0.847],[-1.646,-0.532],[-0.532,0.194],[-0.557,-0.073],[-1.961,-0.266],[-0.315,0.073]],"o":[[-2.856,0.024],[-0.46,0.242],[0.726,1.525],[-0.872,-1.186],[-0.993,-1.016],[-0.145,0.218],[1.162,0.968],[-0.17,0.363],[-0.944,-0.581],[-0.435,-0.315],[-1.259,-2.009],[-0.097,-0.073],[-0.992,1.041],[-0.363,0.363],[-0.533,0.194],[-0.435,-0.193],[-1.016,-0.29],[0.17,-0.412],[-0.073,-0.92],[0.944,0],[0.46,-0.097],[0.048,-0.436],[-0.242,-0.266],[1.573,-0.46],[-1.743,-0.605],[0.46,-0.484],[-0.654,-0.194],[-0.073,0.532],[-0.677,0.436],[-0.145,-0.557],[0.387,-0.484],[0.145,-0.024],[-0.121,-0.411],[0.508,-0.266],[0.605,-0.024],[0.073,1.743],[0.629,0.871],[0.896,-0.411],[-0.363,-1.452],[-0.218,1.21],[1.621,-0.073],[0.048,-1.597],[-0.726,-1.283],[-0.557,0.266],[0.629,0.533],[-1.67,2.783],[-0.266,-0.702],[-0.266,0.048],[-0.678,0.726],[-0.532,-0.411],[0.121,-0.581],[1.234,-0.871],[0.46,-0.315],[-0.097,-0.145],[-0.944,-1.089],[0,0],[-1.573,-1.21],[-0.557,-0.363],[-0.532,-0.29],[-0.17,-0.097],[-0.024,-0.024],[-0.484,-0.242],[-0.629,-0.291],[-0.678,-0.266],[-0.557,-0.194],[-0.653,-0.194],[-0.654,-0.169],[-1.331,-0.315],[-2.057,-0.29],[-0.29,-0.024],[-2.638,0],[-0.145,0.024],[0,0],[-0.217,0.048],[-0.073,0],[-0.75,0.121],[-0.145,0.024],[-0.435,0.097],[-0.217,0.048],[-0.436,0.097],[-2.299,0.702],[-0.412,0.169],[-0.145,0.073],[-0.605,0.315],[-1.621,0.944],[0.097,0.024],[-0.242,0.073],[-0.484,0.363],[1.767,-0.896],[0.968,0.387],[0.581,0.194],[0.435,0.194],[0.025,0.145],[1.065,0.363],[-0.944,2.057],[0.677,0.678],[-0.097,0.145],[-1.404,-0.169],[-0.508,-0.073],[-0.823,-0.145],[-0.315,-0.048],[0.242,-0.218],[0.919,-0.363],[-0.048,-0.218],[-0.726,0.266],[0.145,-0.557],[0,0],[0.339,0.605],[-1.259,0.145],[1.355,0.508],[-0.024,0.121],[-1.089,-0.073],[-0.024,-0.024],[-0.387,0.218],[-1.137,0.581],[-1.041,0.654],[1.695,0.726],[1.525,0.242],[0.048,0.194],[0.17,-0.048],[-0.073,-0.484],[0.581,-0.266],[0.169,-0.266],[-0.629,-0.944],[0.412,0.048],[1.041,0.145],[0.387,2.033],[1.428,1.138],[0.267,0.218],[0.387,0.315],[-0.218,0.46],[0.145,0.097],[0.702,0.484],[-0.073,0.097],[0,0],[0.097,-0.193],[0.412,-0.702],[-0.29,0.121],[-1.21,0.581],[-0.242,-0.242],[-0.944,-0.702],[0.726,-0.218],[0.193,0],[0.194,0.073],[0.242,1.38],[0.194,0],[0.145,0.121],[-0.435,0.169],[-2.88,1.041],[-0.46,0.121],[-0.532,0.169],[-0.048,0.266],[-0.266,-0.097],[-1.743,-0.169],[-0.217,0.653],[-0.605,0.581],[-0.799,0.46],[0.121,0.266],[0.145,0.629],[-0.194,0.048],[-0.218,-0.29],[-0.242,-0.363],[-0.314,-0.363],[-2.154,-1.137],[-0.145,-0.024],[-1.864,0.726],[-0.17,1.452],[0.726,0.436],[0.363,-1.404],[1.016,0.266],[-0.169,0.484],[0,0.097],[0.557,0.024],[0.992,-0.121],[0,0.048],[-0.048,0.532],[0.193,0.581],[0.29,-0.048],[0.799,-0.169],[0.145,0.073],[0.775,-0.581],[0,0],[0.581,-0.412],[1.767,1.452],[0,0.29],[0.702,0.387],[0.654,0.654],[0.509,-0.048],[0.823,0.653],[0.145,0.557],[2.71,0.654],[0.823,0.411],[-0.508,0.944],[-0.242,0.412],[-0.121,0.29],[-0.169,1.622],[-0.46,0.557],[-0.702,0.29],[-0.29,0.242],[0.194,1.259],[-0.145,0.145],[-0.145,0.121],[-0.654,1.501],[0.217,1.743],[-1.016,0],[0,0],[0.314,0.532],[-0.678,0.75],[0.46,0.315],[-0.702,0.605],[-0.75,0.557],[5.494,2.081],[10.528,0],[2.057,-1.404],[0.048,-0.097],[0.194,-0.169],[1.017,-0.944],[0.048,0],[0.412,-0.484],[-0.097,-0.169],[-0.242,-0.436],[0.145,-2.081],[-0.654,-1.38],[0.194,-0.218],[-0.799,-1.646],[-1.5,-1.186],[0.073,-0.315],[-0.314,-0.266],[-0.919,0.46],[-0.314,-0.46],[-1.718,0.823],[-0.17,-0.024],[-0.823,0.92],[-1.138,-1.186],[-1.234,-0.726],[0.919,-1.718],[0.266,-1.573],[0.557,-0.266],[0.387,-1.646],[2.88,-0.678],[0.605,-0.097],[0.291,0.242],[1.307,0.581],[0.46,0.169],[0.654,-0.194],[1.936,0.145],[0.388,0.073],[-0.194,-1.113]],"v":[[370.258,-52.913],[365.95,-56.035],[364.594,-55.309],[363.602,-53.155],[361.037,-56.737],[357.576,-59.278],[357.115,-58.649],[360.601,-55.793],[360.165,-54.68],[357.285,-56.35],[356.099,-57.294],[352.057,-57.56],[351.162,-57.027],[348.209,-53.881],[346.806,-53.252],[345.184,-52.84],[343.828,-53.47],[342.788,-55.309],[342.788,-56.568],[344.022,-57.923],[346.781,-57.85],[348.064,-58.794],[347.337,-60.295],[345.91,-60.948],[350.291,-62.231],[345.571,-63.417],[346.829,-64.893],[345.159,-65.329],[344.917,-64.07],[342.739,-62.981],[342.473,-64.627],[344.24,-65.716],[344.554,-65.934],[344.24,-67.023],[345.692,-67.677],[347.483,-67.217],[349.976,-63.707],[351.791,-63.441],[354.55,-64.821],[356.026,-66.539],[357.576,-64.918],[362.464,-64.966],[364.57,-67.023],[362.15,-70.702],[360.165,-69.928],[361.496,-68.863],[357.115,-65.934],[356.293,-67.943],[355.833,-67.894],[353.533,-67.459],[352.711,-69.395],[354.26,-70.823],[358.011,-73.243],[359.342,-74.308],[358.955,-74.72],[356.002,-77.842],[355.978,-77.866],[351.041,-81.23],[349.322,-82.222],[347.725,-83.07],[347.241,-83.312],[347.168,-83.336],[345.74,-84.013],[343.876,-84.812],[341.771,-85.587],[340.077,-86.168],[338.117,-86.724],[336.132,-87.208],[332.066,-87.959],[325.797,-88.443],[324.902,-88.467],[317.132,-87.862],[316.697,-87.813],[316.6,-87.813],[315.995,-87.692],[315.802,-87.644],[313.574,-87.184],[313.115,-87.087],[311.784,-86.748],[311.106,-86.555],[309.775,-86.192],[303.119,-83.578],[301.933,-82.997],[301.497,-82.779],[299.731,-81.811],[295.011,-78.737],[295.278,-78.592],[294.551,-78.399],[293.075,-77.237],[298.666,-77.116],[301.643,-76.123],[303.434,-75.688],[304.377,-74.453],[304.959,-74.139],[308.153,-73.025],[304.451,-72.42],[306.169,-70.654],[305.878,-70.17],[301.788,-70.75],[300.239,-70.992],[297.746,-71.404],[296.947,-71.864],[297.601,-72.445],[300.384,-73.389],[300.19,-74.066],[297.867,-73.364],[298.279,-74.865],[294.479,-74.865],[295.375,-73.292],[291.816,-72.808],[295.544,-71.355],[295.447,-70.968],[291.913,-71.21],[291.381,-71.912],[290.34,-71.355],[286.855,-69.589],[286.927,-67.701],[292.276,-65.934],[295.35,-63.659],[296.294,-63.368],[296.633,-64.167],[296.294,-65.498],[297.795,-66.273],[297.286,-67.58],[298.496,-70.17],[299.682,-70.024],[302.78,-69.395],[305.733,-68.863],[309.92,-65.547],[310.743,-64.869],[311.953,-63.901],[311.275,-62.497],[311.687,-62.231],[313.696,-60.851],[313.43,-60.537],[309.581,-60.537],[309.871,-61.045],[311.082,-63.223],[310.211,-62.836],[307.088,-61.408],[306.435,-61.965],[303.434,-60.876],[305.007,-61.335],[305.709,-61.19],[306.072,-60.948],[308.323,-59.665],[308.879,-59.327],[309.315,-58.915],[308.129,-58.504],[304.523,-58.504],[303.071,-58.189],[302.078,-57.003],[302.151,-56.035],[301.425,-56.204],[298.496,-53.615],[297.504,-51.848],[295.544,-50.347],[295.035,-48.581],[295.301,-47.782],[295.713,-45.87],[295.108,-45.628],[294.479,-46.548],[293.704,-47.637],[292.639,-48.581],[286.177,-48.411],[285.814,-48.193],[284.023,-44.272],[285.887,-41.296],[288.476,-42.191],[290.703,-42.99],[290.703,-41.392],[290.558,-39.795],[290.534,-39.48],[292.155,-39.432],[293.607,-38.004],[293.583,-37.883],[293.511,-36.334],[294.551,-34.882],[295.398,-35.027],[297.818,-34.785],[298.69,-35.414],[301.304,-37.302],[301.304,-35.487],[302.877,-36.479],[308.468,-35.705],[308.42,-34.737],[310.162,-33.696],[312.292,-32.8],[314.18,-31.856],[315.85,-29.702],[317.06,-28.395],[324.878,-25.66],[325.724,-23.482],[324.006,-20.747],[323.353,-19.489],[323.134,-18.666],[321.537,-14.309],[319.384,-13.39],[317.302,-12.349],[316.769,-11.211],[315.39,-8.694],[314.906,-8.307],[314.495,-7.847],[311.058,-5.645],[308.879,-3.055],[307.137,-1.796],[305.564,-1.796],[306.314,-0.49],[304.208,1.785],[305.54,2.681],[303.7,4.254],[303.288,5.948],[320.932,9.119],[349.346,0.382],[355.252,-4.265],[355.421,-4.459],[355.978,-4.967],[358.882,-8.017],[358.931,-8.065],[360.141,-9.517],[359.875,-10.026],[359.1,-11.332],[357.237,-16.73],[357.817,-20.699],[358.205,-21.498],[356.123,-26.604],[355.542,-30.574],[355.494,-31.639],[354.235,-31.881],[352.323,-32.486],[350.605,-33.236],[345.256,-32.292],[344.603,-32.123],[342.57,-32.365],[339.109,-35.826],[337.633,-38.536],[338.286,-43.692],[341.239,-47.733],[342.4,-49.355],[345.402,-52.114],[354.138,-53.615],[356.026,-53.203],[356.099,-51.219],[360.577,-49.355],[362.222,-49.767],[364.013,-50.468],[369.87,-49.67],[370.911,-49.694]],"c":true},"ix":2},"nm":"Path 5","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.3137,0.2745,0.8941,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":6,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[2.208,1.149],[0.442,0.67],[0.941,1.627],[-0.038,0.402],[0.115,0.268],[-0.941,0.613],[-0.115,0.134],[0.653,1.263],[0.73,-0.727],[0.058,0.057],[1.056,0.823],[0.691,0.402],[0.96,0.383],[0.557,0.038],[0.134,0.096],[0.73,3.292],[0.154,0.172],[0.749,0.766],[0.269,0.211],[0.038,-0.306],[0,0],[-0.48,-0.708],[0.077,-0.077],[0.48,0.325],[0,-2.393],[-13.191,-9.092],[-0.038,-0.019],[-0.134,-0.077],[-0.096,-0.057],[-0.826,-0.44],[-0.115,0.9],[-0.269,1.684],[-0.134,0.574],[-0.365,1.646],[-0.23,1.742]],"o":[[-0.691,-0.364],[-1.056,-1.57],[-0.192,-0.325],[0.038,-0.364],[-0.518,-1.206],[0.154,-0.096],[0.96,-1.072],[-0.634,-1.206],[-0.038,0.057],[-1.075,-0.823],[-0.653,-0.498],[-0.883,-0.498],[-0.499,-0.191],[-0.211,-0.019],[-2.208,-1.321],[-0.038,-0.191],[-0.71,-0.785],[-0.25,-0.249],[-0.058,0.306],[0,0],[0.461,0.708],[-0.077,0.076],[-0.461,-0.326],[-0.327,2.297],[0,17.207],[0.019,0.038],[0.134,0.096],[0.096,0.076],[0.787,0.498],[-0.077,-0.976],[0.211,-1.684],[0.115,-0.574],[0.365,-1.627],[0.384,-1.704],[0.288,-2.411]],"v":[[299.912,-18.387],[298.223,-20.148],[295.247,-24.971],[295.112,-26.158],[295.4,-27.21],[296.379,-29.718],[296.744,-30.139],[297.071,-33.584],[295.132,-33.776],[294.863,-33.795],[291.675,-36.264],[289.717,-37.719],[286.914,-39.039],[285.282,-39.269],[284.629,-39.154],[278.504,-43.825],[278.062,-44.361],[275.912,-46.696],[275.125,-47.366],[274.971,-46.447],[274.971,-46.428],[276.373,-44.284],[276.142,-44.054],[274.741,-45.03],[274.241,-37.968],[296.072,3.548],[296.168,3.625],[296.572,3.874],[296.86,4.065],[299.298,5.462],[299.087,2.649],[300.028,-2.385],[300.085,-4.185],[301.352,-9.065],[302.274,-14.233]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.3137,0.2745,0.8941,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.387,-0.242],[0.847,-0.629],[-0.678,-0.799],[-0.024,-0.145],[0.847,-0.073],[0.508,-0.097],[-0.194,-0.654],[2.106,-0.29],[0.581,-0.194],[0.557,-0.073],[0.242,-0.024],[0.363,-1.307],[0.024,-0.024],[0.532,-0.557],[0.193,0.121],[0.145,0.048],[1.017,1.017],[0.17,0.266],[0.363,0.605],[0.266,0.605],[-0.533,0.726],[0.557,-0.194],[3.05,-0.121],[0,0],[0.992,-0.121],[0.242,0.145],[0.532,0.266],[-0.557,1.017],[-0.992,0.944],[-1.307,-0.097],[-0.121,0],[-0.823,2.033],[-0.46,-0.291],[-1.549,0],[-1.234,0],[-2.614,0.024],[-0.266,-1.041],[-1.476,1.138],[-0.992,-0.339],[-0.266,-0.169]],"o":[[-0.823,0.605],[-0.532,0.436],[0.096,0.097],[0.121,0.847],[-0.387,0.048],[0.194,0.605],[-1.864,0.944],[-0.629,0.073],[-0.532,0.193],[-0.266,0.024],[-0.992,0.097],[0,0.024],[-0.194,0.678],[-0.17,0.218],[-0.145,-0.048],[-1.331,-0.363],[-0.193,-0.169],[-0.363,-0.605],[-0.363,-0.581],[-0.121,-0.266],[-0.557,0.121],[-0.798,-2.493],[0,0],[-0.969,0.048],[-0.242,0],[-0.605,-0.339],[1.21,-0.533],[0.847,-1.501],[0.823,-0.75],[0.145,0.024],[2.033,0.218],[0.387,0.218],[0.968,-1.718],[1.234,-0.024],[2.614,-0.024],[1.477,0],[0.484,1.767],[0.823,-0.629],[0.242,0.073],[-0.484,0.387]],"v":[[232.833,-83.602],[230.243,-81.787],[229.977,-80.141],[230.146,-79.73],[228.501,-77.551],[227.266,-77.309],[227.775,-75.567],[221.724,-73.8],[219.933,-73.146],[218.311,-72.638],[217.537,-72.566],[215.286,-70.968],[215.262,-70.92],[213.882,-69.153],[213.084,-68.79],[212.672,-68.911],[208.92,-70.508],[208.364,-71.186],[207.275,-73.001],[206.307,-74.816],[207.493,-76.511],[205.75,-76.027],[200.184,-79.463],[200.159,-79.463],[197.231,-79.1],[196.456,-79.415],[194.714,-80.407],[198.489,-82.174],[201.829,-84.377],[205.823,-84.885],[206.186,-84.861],[209.114,-86.603],[210.276,-85.829],[214.463,-87.378],[218.166,-87.45],[226.032,-87.523],[228.065,-85.321],[230.703,-84.425],[233.341,-84.933],[234.116,-84.57]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[1.912,0.896],[0,0.024],[0.024,0.073],[0.097,0.218],[-0.242,0],[-1.21,-0.048],[-0.75,-0.169]],"o":[[0,0],[-0.048,-0.073],[-0.097,-0.291],[0.291,-0.097],[1.234,0],[0.484,0.097],[-2.033,1.67]],"v":[[227.702,-71.501],[227.629,-71.549],[227.484,-71.767],[227.218,-72.541],[228.041,-72.856],[231.744,-72.783],[233.462,-72.324]],"c":true},"ix":2},"nm":"Path 2","mn":"ADBE Vector Shape - Group","hd":false},{"ind":2,"ty":"sh","ix":3,"ks":{"a":0,"k":{"i":[[0.242,0],[0.242,0.024],[0.121,0],[0.411,0.048],[-0.532,0],[-0.072,-0.024],[-0.024,0],[-0.024,0],[-0.121,-0.024],[-0.073,-0.097],[-0.048,-0.048],[0,0],[-0.048,-0.048],[-0.048,-0.048],[-0.048,-0.145]],"o":[[-0.291,-0.024],[-0.121,0],[-0.388,-0.024],[0.508,-0.605],[0.121,0],[0.024,0],[0.024,0.048],[0.073,0],[0.073,0.097],[0.048,0.073],[0,0],[0.048,0.024],[0.048,0.073],[0.073,0.097],[-0.266,-0.048]],"v":[[196.021,-40.86],[195.173,-40.932],[194.811,-40.957],[193.6,-41.102],[195.198,-42.022],[195.56,-41.997],[195.657,-41.949],[195.778,-41.876],[196.021,-41.804],[196.287,-41.538],[196.432,-41.392],[196.432,-41.344],[196.553,-41.223],[196.674,-41.078],[196.819,-40.763]],"c":true},"ix":2},"nm":"Path 3","mn":"ADBE Vector Shape - Group","hd":false},{"ind":3,"ty":"sh","ix":4,"ks":{"a":0,"k":{"i":[[0.46,0.169],[0.314,0.097],[0.097,0.048],[0.29,0.048],[0.073,0.073],[0.387,0.097],[0.048,0.024],[-0.048,0],[-1.234,-0.629],[-0.726,-0.629]],"o":[[-0.339,-0.073],[-0.121,-0.048],[-0.314,-0.097],[-0.073,-0.024],[-0.435,-0.097],[-0.048,-0.024],[0.048,-0.024],[0.75,-0.436],[0.654,0.315],[-0.485,-0.169]],"v":[[191.011,-42.699],[189.994,-42.966],[189.655,-43.087],[188.76,-43.329],[188.542,-43.425],[187.356,-43.764],[187.211,-43.813],[187.332,-43.885],[190.381,-43.619],[192.463,-42.191]],"c":true},"ix":2},"nm":"Path 4","mn":"ADBE Vector Shape - Group","hd":false},{"ind":4,"ty":"sh","ix":5,"ks":{"a":0,"k":{"i":[[1.234,2.638],[0.435,-0.266],[1.67,-0.46],[0.992,1.016],[1.162,0.871],[0.17,-0.218],[-1.186,-0.968],[0.097,-0.29],[0.944,0.581],[0.242,0.363],[1.307,0.992],[0.242,-0.242],[1.017,-0.992],[0.484,-0.169],[0.532,-0.145],[0.46,0.121],[-0.46,1.113],[0.073,0.411],[-0.895,-0.024],[-0.895,0.097],[-0.048,0.387],[0.363,0.436],[0.678,0.339],[-1.549,0.46],[1.235,1.501],[-0.46,0.605],[0.532,0.169],[0.218,-0.145],[0.726,-0.363],[-0.218,0.339],[-0.581,0.363],[-0.097,0.097],[0.121,0.339],[-0.435,0],[-0.024,-0.242],[-0.798,-1.186],[-0.654,0.315],[-0.944,0.46],[-1.597,-0.073],[-1.114,0.024],[-1.67,0],[-1.38,-0.242],[0.847,1.162],[0.823,-0.339],[-0.363,-0.29],[2.276,0.121],[0.266,0.605],[0.072,-0.024],[0.726,0.605],[-0.121,0.557],[-0.605,0.363],[-1.234,0.823],[-0.46,0.412],[0.17,0.169],[1.041,0.992],[0,0],[1.718,1.016],[0.581,0.315],[0.532,0.266],[0.17,0.073],[0.024,0],[0.46,0.218],[0.629,0.266],[0.726,0.242],[0.557,0.193],[0.654,0.169],[0.654,0.145],[1.38,0.194],[2.13,0.024],[0.314,0],[2.541,-0.411],[0.145,-0.024],[0,0],[0.194,-0.048],[0.072,-0.024],[0.726,-0.169],[0.145,-0.048],[0.436,-0.121],[0.217,-0.097],[0.435,-0.121],[2.13,-1.041],[0.387,-0.218],[0.145,-0.073],[0.581,-0.339],[1.525,-1.113],[-0.073,-0.097],[0.266,-0.097],[0.484,-0.412],[-1.961,-0.726],[-1.016,-0.315],[-0.557,-0.242],[-0.145,-0.702],[-0.218,-0.121],[-1.065,-0.363],[1.282,-0.363],[-0.508,-0.532],[0.121,-0.169],[1.331,0.242],[0.508,0.073],[0.798,0.169],[0.29,0.169],[-0.242,0.097],[-0.919,0.315],[0.048,0.266],[0.847,-0.242],[-0.17,0.557],[0,0],[-0.363,-0.605],[1.259,-0.194],[-1.186,-0.436],[0.024,-0.097],[1.38,0.073],[0.242,0.315],[0.363,-0.145],[1.089,-0.702],[-1.113,-0.508],[-1.839,-0.315],[-0.557,-1.452],[-0.314,0.024],[0.024,0.266],[0.073,0.363],[-0.291,0.363],[0.266,0.387],[-1.137,-0.097],[-0.387,-0.073],[-0.992,-0.218],[-1.984,1.525],[-1.379,-1.113],[-0.266,-0.218],[-0.411,-0.315],[0.242,-0.411],[-0.121,-0.073],[-0.654,-0.46],[0.145,-0.073],[0,0],[-0.121,0.169],[-0.484,0.847],[0.291,-0.121],[0.944,-0.387],[0.194,0.121],[1.283,-1.477],[-0.412,0.024],[-0.217,-0.073],[-0.024,-0.073],[-0.992,0],[-0.193,-0.193],[-0.169,-0.145],[0.339,-0.097],[0.654,0.944],[0.46,-0.145],[0.048,-0.726],[-0.073,-0.387],[0.217,0],[1.065,-0.629],[0.46,-0.46],[0.678,-0.436],[-0.363,-0.823],[-0.072,-0.266],[-0.17,-0.629],[0.17,-0.073],[0.217,0.315],[0.266,0.363],[0.411,0.194],[2.154,0.557],[0.121,-0.048],[0.145,-1.452],[-1.113,-0.654],[-0.218,0.774],[-0.678,-0.242],[0.194,-0.605],[0.024,-0.557],[0,-0.097],[-0.532,0.024],[0.145,-0.968],[0.024,-0.048],[-0.17,-0.484],[-0.266,0],[-0.266,0.048],[-0.798,-0.508],[-0.315,0.194],[-1.065,0.75],[0,0],[-0.145,-0.145],[-1.743,-0.871],[0,-0.266],[-0.411,-0.436],[-0.944,0.121],[-0.653,-0.581],[-0.145,-0.581],[-0.508,-0.097],[-2.493,-1.21],[0.532,-1.041],[0.532,-0.944],[0.17,-0.411],[0.025,-0.266],[1.065,-1.186],[0.726,-0.339],[0.654,-0.46],[-0.048,-0.363],[0.654,-0.702],[0.17,-0.121],[0.097,-0.194],[1.743,0.218],[1.743,0.048],[0.097,-0.992],[0,0],[-0.217,-0.387],[0.726,-0.75],[-0.532,-0.339],[0.557,-0.46],[-0.46,-0.581],[-6.244,0],[-8.108,5.518],[-1.864,1.694],[-0.048,0.048],[-0.17,0.194],[-0.919,1.065],[0,0.024],[-0.363,0.508],[0.121,0.169],[-0.024,0.411],[0.775,1.718],[-1.283,1.21],[0.121,0.169],[1.621,1.283],[-0.46,1.452],[0.17,0.121],[0.315,-0.169],[0.581,0.726],[0.411,-0.169],[1.864,0.145],[0.121,-0.121],[0.557,0.605],[1.38,0.823],[-0.363,0.726],[-0.291,1.67],[-1.767,0.823],[-0.121,0.654],[-1.355,0.266],[-2.904,0.411],[-0.435,-0.387],[0,-0.847],[-1.646,-0.532],[-0.532,0.194],[-0.557,-0.073],[-1.961,-0.266],[-0.315,0.073],[0.242,1.041]],"o":[[-0.46,0.242],[0.726,1.525],[-0.872,-1.186],[-0.993,-1.016],[-0.145,0.218],[1.162,0.968],[-0.17,0.363],[-0.944,-0.581],[-0.435,-0.315],[-1.259,-2.009],[-0.097,-0.073],[-0.992,1.041],[-0.363,0.363],[-0.533,0.194],[-0.435,-0.193],[-1.016,-0.29],[0.17,-0.412],[-0.073,-0.92],[0.944,0],[0.46,-0.097],[0.048,-0.436],[-0.242,-0.266],[1.573,-0.46],[-1.743,-0.605],[0.46,-0.484],[-0.654,-0.194],[-0.073,0.532],[-0.677,0.436],[-0.145,-0.557],[0.387,-0.484],[0.145,-0.024],[-0.121,-0.411],[0.508,-0.266],[0.605,-0.024],[0.073,1.743],[0.629,0.871],[0.896,-0.411],[-0.363,-1.452],[-0.218,1.21],[1.621,-0.073],[0.048,-1.597],[-0.726,-1.283],[-0.557,0.266],[0.629,0.533],[-1.67,2.783],[-0.266,-0.702],[-0.266,0.048],[-0.678,0.726],[-0.532,-0.411],[0.121,-0.581],[1.234,-0.871],[0.46,-0.315],[-0.097,-0.145],[-0.944,-1.089],[0,0],[-1.573,-1.21],[-0.557,-0.363],[-0.532,-0.29],[-0.17,-0.097],[-0.024,-0.024],[-0.484,-0.242],[-0.629,-0.291],[-0.678,-0.266],[-0.557,-0.194],[-0.653,-0.194],[-0.654,-0.169],[-1.331,-0.315],[-2.057,-0.29],[-0.29,-0.024],[-2.638,0],[-0.145,0.024],[0,0],[-0.217,0.048],[-0.073,0],[-0.75,0.121],[-0.145,0.024],[-0.435,0.097],[-0.217,0.048],[-0.436,0.097],[-2.299,0.702],[-0.412,0.169],[-0.145,0.073],[-0.605,0.315],[-1.621,0.944],[0.097,0.024],[-0.242,0.073],[-0.484,0.363],[1.767,-0.896],[0.968,0.387],[0.581,0.194],[0.435,0.194],[0.025,0.145],[1.065,0.363],[-0.944,2.057],[0.677,0.678],[-0.097,0.145],[-1.404,-0.169],[-0.508,-0.073],[-0.823,-0.145],[-0.315,-0.048],[0.242,-0.218],[0.919,-0.363],[-0.048,-0.218],[-0.726,0.266],[0.145,-0.557],[0,0],[0.339,0.605],[-1.259,0.145],[1.355,0.508],[-0.024,0.121],[-1.089,-0.073],[-0.024,-0.024],[-0.387,0.218],[-1.137,0.581],[-1.041,0.654],[1.695,0.726],[1.525,0.242],[0.048,0.194],[0.17,-0.048],[-0.073,-0.484],[0.581,-0.266],[0.169,-0.266],[-0.629,-0.944],[0.412,0.048],[1.041,0.145],[0.387,2.033],[1.428,1.138],[0.266,0.218],[0.387,0.315],[-0.218,0.46],[0.145,0.097],[0.702,0.484],[-0.073,0.097],[0,0],[0.097,-0.193],[0.412,-0.702],[-0.29,0.121],[-1.21,0.581],[-0.242,-0.242],[-0.944,-0.702],[0.726,-0.218],[0.193,0],[0.194,0.073],[0.242,1.38],[0.194,0],[0.145,0.121],[-0.435,0.169],[-2.88,1.041],[-0.46,0.121],[-0.532,0.169],[-0.048,0.266],[-0.266,-0.097],[-1.743,-0.169],[-0.217,0.653],[-0.605,0.581],[-0.799,0.46],[0.121,0.266],[0.145,0.629],[-0.194,0.048],[-0.218,-0.29],[-0.242,-0.363],[-0.314,-0.363],[-2.154,-1.137],[-0.145,-0.024],[-1.864,0.726],[-0.17,1.452],[0.726,0.436],[0.363,-1.404],[1.016,0.266],[-0.169,0.484],[0,0.097],[0.557,0.024],[0.992,-0.121],[0,0.048],[-0.048,0.532],[0.193,0.581],[0.29,-0.048],[0.799,-0.169],[0.145,0.073],[0.775,-0.581],[0,0],[0.581,-0.412],[1.767,1.452],[0,0.29],[0.702,0.387],[0.654,0.654],[0.509,-0.048],[0.823,0.653],[0.145,0.557],[2.71,0.654],[0.823,0.411],[-0.508,0.944],[-0.242,0.412],[-0.121,0.29],[-0.169,1.622],[-0.46,0.557],[-0.702,0.29],[-0.29,0.242],[0.194,1.259],[-0.145,0.145],[-0.145,0.121],[-0.654,1.501],[0.217,1.743],[-1.016,0],[0,0],[0.314,0.532],[-0.678,0.75],[0.46,0.315],[-0.702,0.605],[-0.75,0.557],[5.494,2.081],[10.528,0],[2.057,-1.404],[0.048,-0.097],[0.194,-0.169],[1.017,-0.944],[0.048,0],[0.412,-0.484],[-0.097,-0.169],[-0.242,-0.436],[0.145,-2.081],[-0.654,-1.38],[0.194,-0.218],[-0.799,-1.646],[-1.5,-1.186],[0.073,-0.315],[-0.314,-0.266],[-0.919,0.46],[-0.314,-0.46],[-1.718,0.823],[-0.17,-0.024],[-0.823,0.92],[-1.138,-1.186],[-1.234,-0.726],[0.919,-1.718],[0.266,-1.573],[0.557,-0.266],[0.387,-1.646],[2.88,-0.678],[0.605,-0.097],[0.291,0.242],[1.307,0.581],[0.46,0.169],[0.654,-0.194],[1.936,0.145],[0.388,0.073],[-0.194,-1.113],[-2.856,0.024]],"v":[[259.456,-56.035],[258.101,-55.309],[257.109,-53.155],[254.543,-56.737],[251.082,-59.278],[250.622,-58.649],[254.108,-55.793],[253.671,-54.68],[250.791,-56.35],[249.605,-57.294],[245.564,-57.56],[244.668,-57.027],[241.715,-53.881],[240.312,-53.252],[238.69,-52.84],[237.335,-53.47],[236.294,-55.309],[236.294,-56.568],[237.528,-57.923],[240.287,-57.85],[241.57,-58.794],[240.844,-60.295],[239.416,-60.948],[243.797,-62.231],[239.077,-63.417],[240.336,-64.893],[238.666,-65.329],[238.424,-64.07],[236.246,-62.981],[235.98,-64.627],[237.746,-65.716],[238.061,-65.934],[237.746,-67.023],[239.198,-67.677],[240.989,-67.217],[243.482,-63.707],[245.297,-63.441],[248.057,-64.821],[249.533,-66.539],[251.082,-64.918],[255.971,-64.966],[258.077,-67.023],[255.656,-70.702],[253.671,-69.928],[255.003,-68.863],[250.622,-65.934],[249.799,-67.943],[249.34,-67.894],[247.04,-67.459],[246.217,-69.395],[247.766,-70.823],[251.518,-73.243],[252.849,-74.308],[252.461,-74.72],[249.509,-77.842],[249.484,-77.866],[244.548,-81.23],[242.829,-82.222],[241.231,-83.07],[240.748,-83.312],[240.675,-83.336],[239.247,-84.013],[237.383,-84.812],[235.278,-85.587],[233.583,-86.168],[231.623,-86.724],[229.638,-87.208],[225.572,-87.959],[219.304,-88.443],[218.408,-88.467],[210.639,-87.862],[210.203,-87.813],[210.106,-87.813],[209.501,-87.692],[209.308,-87.644],[207.081,-87.184],[206.621,-87.087],[205.29,-86.748],[204.613,-86.555],[203.282,-86.192],[196.626,-83.578],[195.44,-82.997],[195.004,-82.779],[193.237,-81.811],[188.518,-78.737],[188.784,-78.592],[188.058,-78.399],[186.581,-77.237],[192.172,-77.116],[195.149,-76.123],[196.94,-75.688],[197.884,-74.453],[198.465,-74.139],[201.66,-73.025],[197.957,-72.42],[199.675,-70.654],[199.385,-70.17],[195.295,-70.75],[193.745,-70.992],[191.253,-71.404],[190.454,-71.864],[191.107,-72.445],[193.891,-73.389],[193.697,-74.066],[191.373,-73.364],[191.785,-74.865],[187.985,-74.865],[188.881,-73.292],[185.323,-72.808],[189.05,-71.355],[188.953,-70.968],[185.42,-71.21],[184.887,-71.912],[183.847,-71.355],[180.362,-69.589],[180.434,-67.701],[185.782,-65.934],[188.856,-63.659],[189.8,-63.368],[190.139,-64.167],[189.8,-65.498],[191.301,-66.273],[190.793,-67.58],[192.003,-70.17],[193.189,-70.024],[196.287,-69.395],[199.239,-68.863],[203.426,-65.547],[204.249,-64.869],[205.46,-63.901],[204.782,-62.497],[205.193,-62.231],[207.202,-60.851],[206.936,-60.537],[203.088,-60.537],[203.378,-61.045],[204.588,-63.223],[203.717,-62.836],[200.595,-61.408],[199.941,-61.965],[196.94,-60.876],[198.514,-61.335],[199.215,-61.19],[199.578,-60.948],[201.829,-59.665],[202.386,-59.327],[202.821,-58.915],[201.635,-58.504],[198.029,-58.504],[196.577,-58.189],[195.585,-57.003],[195.657,-56.035],[194.932,-56.204],[192.003,-53.615],[191.011,-51.848],[189.05,-50.347],[188.542,-48.581],[188.808,-47.782],[189.22,-45.87],[188.615,-45.628],[187.985,-46.548],[187.211,-47.637],[186.146,-48.581],[179.684,-48.411],[179.32,-48.193],[177.529,-44.272],[179.393,-41.296],[181.983,-42.191],[184.209,-42.99],[184.209,-41.392],[184.064,-39.795],[184.04,-39.48],[185.662,-39.432],[187.114,-38.004],[187.089,-37.883],[187.017,-36.334],[188.058,-34.882],[188.905,-35.027],[191.325,-34.785],[192.197,-35.414],[194.811,-37.302],[194.811,-35.487],[196.384,-36.479],[201.975,-35.705],[201.926,-34.737],[203.669,-33.696],[205.798,-32.8],[207.686,-31.856],[209.356,-29.702],[210.567,-28.395],[218.384,-25.66],[219.231,-23.482],[217.513,-20.747],[216.859,-19.489],[216.641,-18.666],[215.044,-14.309],[212.89,-13.39],[210.808,-12.349],[210.276,-11.211],[208.896,-8.694],[208.412,-8.307],[208.001,-7.847],[204.564,-5.645],[202.386,-3.055],[200.643,-1.796],[199.07,-1.796],[199.82,-0.49],[197.715,1.785],[199.046,2.681],[197.207,4.254],[196.795,5.948],[214.439,9.119],[242.853,0.382],[248.758,-4.265],[248.928,-4.459],[249.484,-4.967],[252.389,-8.017],[252.437,-8.065],[253.647,-9.517],[253.381,-10.026],[252.607,-11.332],[250.743,-16.73],[251.324,-20.699],[251.711,-21.498],[249.63,-26.604],[249.049,-30.574],[249,-31.639],[247.742,-31.881],[245.83,-32.486],[244.111,-33.236],[238.763,-32.292],[238.109,-32.123],[236.077,-32.365],[232.615,-35.826],[231.139,-38.536],[231.793,-43.692],[234.745,-47.733],[235.907,-49.355],[238.908,-52.114],[247.645,-53.615],[249.533,-53.203],[249.605,-51.219],[254.083,-49.355],[255.729,-49.767],[257.52,-50.468],[263.377,-49.67],[264.418,-49.694],[263.764,-52.913]],"c":true},"ix":2},"nm":"Path 5","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.3137,0.2745,0.8941,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":6,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[2.208,1.149],[0.442,0.67],[0.941,1.627],[-0.038,0.402],[0.115,0.268],[-0.941,0.613],[-0.115,0.134],[0.653,1.263],[0.73,-0.727],[0.058,0.057],[1.056,0.823],[0.691,0.402],[0.96,0.383],[0.557,0.038],[0.134,0.096],[0.73,3.292],[0.154,0.172],[0.749,0.766],[0.269,0.211],[0.038,-0.306],[0,0],[-0.48,-0.708],[0.077,-0.077],[0.48,0.325],[0,-2.393],[-13.191,-9.092],[-0.038,-0.019],[-0.134,-0.077],[-0.096,-0.057],[-0.826,-0.44],[-0.115,0.9],[-0.269,1.684],[-0.134,0.574],[-0.365,1.646],[-0.23,1.742]],"o":[[-0.691,-0.364],[-1.056,-1.57],[-0.192,-0.325],[0.038,-0.364],[-0.518,-1.206],[0.154,-0.096],[0.96,-1.072],[-0.634,-1.206],[-0.038,0.057],[-1.075,-0.823],[-0.653,-0.498],[-0.883,-0.498],[-0.499,-0.191],[-0.211,-0.019],[-2.208,-1.321],[-0.038,-0.191],[-0.71,-0.785],[-0.25,-0.249],[-0.058,0.306],[0,0],[0.461,0.708],[-0.077,0.076],[-0.461,-0.326],[-0.327,2.297],[0,17.207],[0.019,0.038],[0.134,0.096],[0.096,0.076],[0.787,0.498],[-0.077,-0.976],[0.211,-1.684],[0.115,-0.574],[0.365,-1.627],[0.384,-1.704],[0.288,-2.411]],"v":[[193.419,-18.387],[191.729,-20.148],[188.753,-24.971],[188.619,-26.158],[188.907,-27.21],[189.886,-29.718],[190.251,-30.139],[190.577,-33.584],[188.638,-33.776],[188.369,-33.795],[185.182,-36.264],[183.223,-37.719],[180.42,-39.039],[178.788,-39.269],[178.135,-39.154],[172.01,-43.825],[171.569,-44.361],[169.418,-46.696],[168.631,-47.366],[168.477,-46.447],[168.477,-46.428],[169.879,-44.284],[169.649,-44.054],[168.247,-45.03],[167.748,-37.968],[189.579,3.548],[189.675,3.625],[190.078,3.874],[190.366,4.065],[192.804,5.462],[192.593,2.649],[193.534,-2.385],[193.592,-4.185],[194.859,-9.065],[195.781,-14.233]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.3137,0.2745,0.8941,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.387,-0.242],[0.847,-0.629],[-0.678,-0.799],[-0.024,-0.145],[0.847,-0.073],[0.508,-0.097],[-0.194,-0.654],[2.106,-0.29],[0.581,-0.194],[0.557,-0.073],[0.242,-0.024],[0.363,-1.307],[0.024,-0.024],[0.532,-0.557],[0.193,0.121],[0.145,0.048],[1.017,1.017],[0.17,0.266],[0.363,0.605],[0.266,0.605],[-0.533,0.726],[0.557,-0.194],[3.05,-0.121],[0,0],[0.992,-0.121],[0.242,0.145],[0.532,0.266],[-0.557,1.017],[-0.992,0.944],[-1.307,-0.097],[-0.121,0],[-0.823,2.033],[-0.46,-0.291],[-1.549,0],[-1.234,0],[-2.614,0.024],[-0.266,-1.041],[-1.476,1.138],[-0.992,-0.339],[-0.266,-0.169]],"o":[[-0.823,0.605],[-0.532,0.436],[0.096,0.097],[0.121,0.847],[-0.387,0.048],[0.194,0.605],[-1.864,0.944],[-0.629,0.073],[-0.532,0.193],[-0.266,0.024],[-0.992,0.097],[0,0.024],[-0.194,0.678],[-0.17,0.218],[-0.145,-0.048],[-1.331,-0.363],[-0.193,-0.169],[-0.363,-0.605],[-0.363,-0.581],[-0.121,-0.266],[-0.557,0.121],[-0.798,-2.493],[0,0],[-0.969,0.048],[-0.242,0],[-0.605,-0.339],[1.21,-0.533],[0.847,-1.501],[0.823,-0.75],[0.145,0.024],[2.033,0.218],[0.387,0.218],[0.968,-1.718],[1.234,-0.024],[2.614,-0.024],[1.477,0],[0.484,1.767],[0.823,-0.629],[0.242,0.073],[-0.484,0.387]],"v":[[126.34,-83.602],[123.75,-81.787],[123.484,-80.141],[123.653,-79.73],[122.007,-77.551],[120.773,-77.309],[121.281,-75.567],[115.23,-73.8],[113.439,-73.146],[111.818,-72.638],[111.043,-72.566],[108.793,-70.968],[108.768,-70.92],[107.389,-69.153],[106.59,-68.79],[106.178,-68.911],[102.427,-70.508],[101.87,-71.186],[100.781,-73.001],[99.813,-74.816],[100.999,-76.511],[99.256,-76.027],[93.69,-79.463],[93.666,-79.463],[90.737,-79.1],[89.963,-79.415],[88.22,-80.407],[91.995,-82.174],[95.336,-84.377],[99.329,-84.885],[99.692,-84.861],[102.621,-86.603],[103.782,-85.829],[107.969,-87.378],[111.673,-87.45],[119.538,-87.523],[121.572,-85.321],[124.209,-84.425],[126.848,-84.933],[127.622,-84.57]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[1.912,0.896],[0,0.024],[0.024,0.073],[0.097,0.218],[-0.242,0],[-1.21,-0.048],[-0.75,-0.169]],"o":[[0,0],[-0.048,-0.073],[-0.097,-0.291],[0.291,-0.097],[1.234,0],[0.484,0.097],[-2.033,1.67]],"v":[[121.208,-71.501],[121.136,-71.549],[120.991,-71.767],[120.724,-72.541],[121.547,-72.856],[125.251,-72.783],[126.969,-72.324]],"c":true},"ix":2},"nm":"Path 2","mn":"ADBE Vector Shape - Group","hd":false},{"ind":2,"ty":"sh","ix":3,"ks":{"a":0,"k":{"i":[[0.242,0],[0.242,0.024],[0.121,0],[0.411,0.048],[-0.532,0],[-0.072,-0.024],[-0.024,0],[-0.024,0],[-0.121,-0.024],[-0.073,-0.097],[-0.048,-0.048],[0,0],[-0.048,-0.048],[-0.048,-0.048],[-0.048,-0.145]],"o":[[-0.291,-0.024],[-0.121,0],[-0.388,-0.024],[0.508,-0.605],[0.121,0],[0.024,0],[0.024,0.048],[0.073,0],[0.073,0.097],[0.048,0.073],[0,0],[0.048,0.024],[0.048,0.073],[0.073,0.097],[-0.266,-0.048]],"v":[[89.527,-40.86],[88.68,-40.932],[88.317,-40.957],[87.107,-41.102],[88.704,-42.022],[89.067,-41.997],[89.164,-41.949],[89.285,-41.876],[89.527,-41.804],[89.793,-41.538],[89.938,-41.392],[89.938,-41.344],[90.06,-41.223],[90.18,-41.078],[90.325,-40.763]],"c":true},"ix":2},"nm":"Path 3","mn":"ADBE Vector Shape - Group","hd":false},{"ind":3,"ty":"sh","ix":4,"ks":{"a":0,"k":{"i":[[0.46,0.169],[0.314,0.097],[0.097,0.048],[0.29,0.048],[0.073,0.073],[0.387,0.097],[0.048,0.024],[-0.048,0],[-1.234,-0.629],[-0.726,-0.629]],"o":[[-0.339,-0.073],[-0.121,-0.048],[-0.314,-0.097],[-0.073,-0.024],[-0.435,-0.097],[-0.048,-0.024],[0.048,-0.024],[0.75,-0.436],[0.654,0.315],[-0.485,-0.169]],"v":[[84.517,-42.699],[83.501,-42.966],[83.162,-43.087],[82.266,-43.329],[82.048,-43.425],[80.862,-43.764],[80.717,-43.813],[80.838,-43.885],[83.888,-43.619],[85.969,-42.191]],"c":true},"ix":2},"nm":"Path 4","mn":"ADBE Vector Shape - Group","hd":false},{"ind":4,"ty":"sh","ix":5,"ks":{"a":0,"k":{"i":[[1.234,2.638],[0.435,-0.266],[1.67,-0.46],[0.992,1.016],[1.162,0.871],[0.17,-0.218],[-1.186,-0.968],[0.097,-0.29],[0.944,0.581],[0.242,0.363],[1.307,0.992],[0.242,-0.242],[1.017,-0.992],[0.484,-0.169],[0.532,-0.145],[0.46,0.121],[-0.46,1.113],[0.073,0.411],[-0.895,-0.024],[-0.895,0.097],[-0.048,0.387],[0.363,0.436],[0.678,0.339],[-1.549,0.46],[1.235,1.501],[-0.46,0.605],[0.532,0.169],[0.218,-0.145],[0.726,-0.363],[-0.218,0.339],[-0.581,0.363],[-0.097,0.097],[0.121,0.339],[-0.435,0],[-0.024,-0.242],[-0.798,-1.186],[-0.654,0.315],[-0.944,0.46],[-1.597,-0.073],[-1.114,0.024],[-1.67,0],[-1.38,-0.242],[0.847,1.162],[0.823,-0.339],[-0.363,-0.29],[2.276,0.121],[0.266,0.605],[0.072,-0.024],[0.726,0.605],[-0.121,0.557],[-0.605,0.363],[-1.234,0.823],[-0.46,0.412],[0.17,0.169],[1.041,0.992],[0,0],[1.718,1.016],[0.581,0.315],[0.532,0.266],[0.17,0.073],[0.024,0],[0.46,0.218],[0.629,0.266],[0.726,0.242],[0.557,0.193],[0.654,0.169],[0.654,0.145],[1.38,0.194],[2.13,0.024],[0.314,0],[2.541,-0.411],[0.145,-0.024],[0,0],[0.194,-0.048],[0.072,-0.024],[0.726,-0.169],[0.145,-0.048],[0.436,-0.121],[0.217,-0.097],[0.435,-0.121],[2.13,-1.041],[0.387,-0.218],[0.145,-0.073],[0.581,-0.339],[1.525,-1.113],[-0.073,-0.097],[0.266,-0.097],[0.484,-0.412],[-1.961,-0.726],[-1.016,-0.315],[-0.557,-0.242],[-0.145,-0.702],[-0.218,-0.121],[-1.065,-0.363],[1.282,-0.363],[-0.508,-0.532],[0.121,-0.169],[1.331,0.242],[0.508,0.073],[0.798,0.169],[0.29,0.169],[-0.242,0.097],[-0.919,0.315],[0.048,0.266],[0.847,-0.242],[-0.17,0.557],[0,0],[-0.363,-0.605],[1.259,-0.194],[-1.186,-0.436],[0.024,-0.097],[1.38,0.073],[0.242,0.315],[0.363,-0.145],[1.089,-0.702],[-1.113,-0.508],[-1.839,-0.315],[-0.557,-1.452],[-0.314,0.024],[0.024,0.266],[0.073,0.363],[-0.291,0.363],[0.266,0.387],[-1.137,-0.097],[-0.387,-0.073],[-0.992,-0.218],[-1.984,1.525],[-1.379,-1.113],[-0.266,-0.218],[-0.411,-0.315],[0.242,-0.411],[-0.121,-0.073],[-0.654,-0.46],[0.145,-0.073],[0,0],[-0.121,0.169],[-0.484,0.847],[0.291,-0.121],[0.944,-0.387],[0.194,0.121],[1.283,-1.477],[-0.412,0.024],[-0.217,-0.073],[-0.024,-0.073],[-0.992,0],[-0.193,-0.193],[-0.169,-0.145],[0.339,-0.097],[0.654,0.944],[0.46,-0.145],[0.048,-0.726],[-0.073,-0.387],[0.217,0],[1.065,-0.629],[0.46,-0.46],[0.678,-0.436],[-0.363,-0.823],[-0.072,-0.266],[-0.17,-0.629],[0.17,-0.073],[0.217,0.315],[0.266,0.363],[0.411,0.194],[2.154,0.557],[0.121,-0.048],[0.145,-1.452],[-1.113,-0.654],[-0.218,0.774],[-0.678,-0.242],[0.194,-0.605],[0.024,-0.557],[0,-0.097],[-0.532,0.024],[0.145,-0.968],[0.024,-0.048],[-0.17,-0.484],[-0.266,0],[-0.266,0.048],[-0.798,-0.508],[-0.315,0.194],[-1.065,0.75],[0,0],[-0.145,-0.145],[-1.743,-0.871],[0,-0.266],[-0.411,-0.436],[-0.944,0.121],[-0.653,-0.581],[-0.145,-0.581],[-0.508,-0.097],[-2.493,-1.21],[0.532,-1.041],[0.532,-0.944],[0.17,-0.411],[0.025,-0.266],[1.065,-1.186],[0.726,-0.339],[0.654,-0.46],[-0.048,-0.363],[0.654,-0.702],[0.17,-0.121],[0.097,-0.194],[1.743,0.218],[1.743,0.048],[0.097,-0.992],[0,0],[-0.217,-0.387],[0.726,-0.75],[-0.532,-0.339],[0.557,-0.46],[-0.46,-0.581],[-6.244,0],[-8.108,5.518],[-1.864,1.694],[-0.048,0.048],[-0.17,0.194],[-0.919,1.065],[0,0.024],[-0.363,0.508],[0.121,0.169],[-0.024,0.411],[0.775,1.718],[-1.283,1.21],[0.121,0.169],[1.621,1.283],[-0.46,1.452],[0.17,0.121],[0.315,-0.169],[0.581,0.726],[0.411,-0.169],[1.864,0.145],[0.121,-0.121],[0.557,0.605],[1.38,0.823],[-0.363,0.726],[-0.291,1.67],[-1.767,0.823],[-0.121,0.654],[-1.355,0.266],[-2.904,0.411],[-0.435,-0.387],[0,-0.847],[-1.646,-0.532],[-0.532,0.194],[-0.557,-0.073],[-1.961,-0.266],[-0.315,0.073],[0.242,1.041]],"o":[[-0.46,0.242],[0.726,1.525],[-0.872,-1.186],[-0.993,-1.016],[-0.145,0.218],[1.162,0.968],[-0.17,0.363],[-0.944,-0.581],[-0.435,-0.315],[-1.259,-2.009],[-0.097,-0.073],[-0.992,1.041],[-0.363,0.363],[-0.533,0.194],[-0.435,-0.193],[-1.016,-0.29],[0.17,-0.412],[-0.073,-0.92],[0.944,0],[0.46,-0.097],[0.048,-0.436],[-0.242,-0.266],[1.573,-0.46],[-1.743,-0.605],[0.46,-0.484],[-0.654,-0.194],[-0.073,0.532],[-0.677,0.436],[-0.145,-0.557],[0.387,-0.484],[0.145,-0.024],[-0.121,-0.411],[0.508,-0.266],[0.605,-0.024],[0.073,1.743],[0.629,0.871],[0.896,-0.411],[-0.363,-1.452],[-0.218,1.21],[1.621,-0.073],[0.048,-1.597],[-0.726,-1.283],[-0.557,0.266],[0.629,0.533],[-1.67,2.783],[-0.266,-0.702],[-0.266,0.048],[-0.678,0.726],[-0.532,-0.411],[0.121,-0.581],[1.234,-0.871],[0.46,-0.315],[-0.097,-0.145],[-0.944,-1.089],[0,0],[-1.573,-1.21],[-0.557,-0.363],[-0.532,-0.29],[-0.17,-0.097],[-0.024,-0.024],[-0.484,-0.242],[-0.629,-0.291],[-0.678,-0.266],[-0.557,-0.194],[-0.653,-0.194],[-0.654,-0.169],[-1.331,-0.315],[-2.057,-0.29],[-0.29,-0.024],[-2.638,0],[-0.145,0.024],[0,0],[-0.217,0.048],[-0.073,0],[-0.75,0.121],[-0.145,0.024],[-0.435,0.097],[-0.217,0.048],[-0.436,0.097],[-2.299,0.702],[-0.412,0.169],[-0.145,0.073],[-0.605,0.315],[-1.621,0.944],[0.097,0.024],[-0.242,0.073],[-0.484,0.363],[1.767,-0.896],[0.968,0.387],[0.581,0.194],[0.435,0.194],[0.025,0.145],[1.065,0.363],[-0.944,2.057],[0.677,0.678],[-0.097,0.145],[-1.404,-0.169],[-0.508,-0.073],[-0.823,-0.145],[-0.315,-0.048],[0.242,-0.218],[0.919,-0.363],[-0.048,-0.218],[-0.726,0.266],[0.145,-0.557],[0,0],[0.339,0.605],[-1.259,0.145],[1.355,0.508],[-0.024,0.121],[-1.089,-0.073],[-0.024,-0.024],[-0.387,0.218],[-1.137,0.581],[-1.041,0.654],[1.695,0.726],[1.525,0.242],[0.048,0.194],[0.17,-0.048],[-0.073,-0.484],[0.581,-0.266],[0.169,-0.266],[-0.629,-0.944],[0.412,0.048],[1.041,0.145],[0.387,2.033],[1.428,1.138],[0.266,0.218],[0.387,0.315],[-0.218,0.46],[0.145,0.097],[0.702,0.484],[-0.073,0.097],[0,0],[0.097,-0.193],[0.412,-0.702],[-0.29,0.121],[-1.21,0.581],[-0.242,-0.242],[-0.944,-0.702],[0.726,-0.218],[0.193,0],[0.194,0.073],[0.242,1.38],[0.194,0],[0.145,0.121],[-0.435,0.169],[-2.88,1.041],[-0.46,0.121],[-0.532,0.169],[-0.048,0.266],[-0.266,-0.097],[-1.743,-0.169],[-0.217,0.653],[-0.605,0.581],[-0.799,0.46],[0.121,0.266],[0.145,0.629],[-0.194,0.048],[-0.218,-0.29],[-0.242,-0.363],[-0.314,-0.363],[-2.154,-1.137],[-0.145,-0.024],[-1.864,0.726],[-0.17,1.452],[0.726,0.436],[0.363,-1.404],[1.016,0.266],[-0.169,0.484],[0,0.097],[0.557,0.024],[0.992,-0.121],[0,0.048],[-0.048,0.532],[0.193,0.581],[0.29,-0.048],[0.799,-0.169],[0.145,0.073],[0.775,-0.581],[0,0],[0.581,-0.412],[1.767,1.452],[0,0.29],[0.702,0.387],[0.654,0.654],[0.509,-0.048],[0.823,0.653],[0.145,0.557],[2.71,0.654],[0.823,0.411],[-0.508,0.944],[-0.242,0.412],[-0.121,0.29],[-0.169,1.622],[-0.46,0.557],[-0.702,0.29],[-0.29,0.242],[0.194,1.259],[-0.145,0.145],[-0.145,0.121],[-0.654,1.501],[0.217,1.743],[-1.016,0],[0,0],[0.314,0.532],[-0.678,0.75],[0.46,0.315],[-0.702,0.605],[-0.75,0.557],[5.494,2.081],[10.528,0],[2.057,-1.404],[0.048,-0.097],[0.194,-0.169],[1.017,-0.944],[0.048,0],[0.412,-0.484],[-0.097,-0.169],[-0.242,-0.436],[0.145,-2.081],[-0.654,-1.38],[0.194,-0.218],[-0.799,-1.646],[-1.5,-1.186],[0.073,-0.315],[-0.314,-0.266],[-0.919,0.46],[-0.314,-0.46],[-1.718,0.823],[-0.17,-0.024],[-0.823,0.92],[-1.138,-1.186],[-1.234,-0.726],[0.919,-1.718],[0.266,-1.573],[0.557,-0.266],[0.387,-1.646],[2.88,-0.678],[0.605,-0.097],[0.291,0.242],[1.307,0.581],[0.46,0.169],[0.654,-0.194],[1.936,0.145],[0.388,0.073],[-0.194,-1.113],[-2.856,0.024]],"v":[[152.963,-56.035],[151.607,-55.309],[150.615,-53.155],[148.049,-56.737],[144.589,-59.278],[144.128,-58.649],[147.614,-55.793],[147.178,-54.68],[144.298,-56.35],[143.112,-57.294],[139.07,-57.56],[138.175,-57.027],[135.222,-53.881],[133.819,-53.252],[132.197,-52.84],[130.841,-53.47],[129.8,-55.309],[129.8,-56.568],[131.035,-57.923],[133.794,-57.85],[135.077,-58.794],[134.35,-60.295],[132.923,-60.948],[137.304,-62.231],[132.584,-63.417],[133.842,-64.893],[132.172,-65.329],[131.93,-64.07],[129.752,-62.981],[129.486,-64.627],[131.253,-65.716],[131.567,-65.934],[131.253,-67.023],[132.705,-67.677],[134.496,-67.217],[136.989,-63.707],[138.804,-63.441],[141.563,-64.821],[143.039,-66.539],[144.589,-64.918],[149.477,-64.966],[151.583,-67.023],[149.163,-70.702],[147.178,-69.928],[148.509,-68.863],[144.128,-65.934],[143.306,-67.943],[142.846,-67.894],[140.546,-67.459],[139.724,-69.395],[141.273,-70.823],[145.024,-73.243],[146.355,-74.308],[145.968,-74.72],[143.015,-77.842],[142.991,-77.866],[138.054,-81.23],[136.335,-82.222],[134.738,-83.07],[134.254,-83.312],[134.181,-83.336],[132.753,-84.013],[130.889,-84.812],[128.784,-85.587],[127.089,-86.168],[125.129,-86.724],[123.145,-87.208],[119.079,-87.959],[112.81,-88.443],[111.915,-88.467],[104.145,-87.862],[103.71,-87.813],[103.613,-87.813],[103.008,-87.692],[102.815,-87.644],[100.587,-87.184],[100.128,-87.087],[98.796,-86.748],[98.119,-86.555],[96.788,-86.192],[90.132,-83.578],[88.946,-82.997],[88.51,-82.779],[86.743,-81.811],[82.024,-78.737],[82.291,-78.592],[81.564,-78.399],[80.088,-77.237],[85.679,-77.116],[88.656,-76.123],[90.447,-75.688],[91.39,-74.453],[91.972,-74.139],[95.166,-73.025],[91.464,-72.42],[93.182,-70.654],[92.891,-70.17],[88.801,-70.75],[87.252,-70.992],[84.759,-71.404],[83.96,-71.864],[84.614,-72.445],[87.397,-73.389],[87.203,-74.066],[84.88,-73.364],[85.292,-74.865],[81.492,-74.865],[82.387,-73.292],[78.829,-72.808],[82.556,-71.355],[82.46,-70.968],[78.926,-71.21],[78.394,-71.912],[77.353,-71.355],[73.868,-69.589],[73.94,-67.701],[79.289,-65.934],[82.363,-63.659],[83.307,-63.368],[83.645,-64.167],[83.307,-65.498],[84.808,-66.273],[84.299,-67.58],[85.509,-70.17],[86.695,-70.024],[89.793,-69.395],[92.746,-68.863],[96.933,-65.547],[97.756,-64.869],[98.966,-63.901],[98.288,-62.497],[98.7,-62.231],[100.709,-60.851],[100.443,-60.537],[96.594,-60.537],[96.884,-61.045],[98.095,-63.223],[97.224,-62.836],[94.101,-61.408],[93.448,-61.965],[90.447,-60.876],[92.02,-61.335],[92.722,-61.19],[93.085,-60.948],[95.336,-59.665],[95.892,-59.327],[96.328,-58.915],[95.142,-58.504],[91.536,-58.504],[90.084,-58.189],[89.091,-57.003],[89.164,-56.035],[88.438,-56.204],[85.509,-53.615],[84.517,-51.848],[82.556,-50.347],[82.048,-48.581],[82.314,-47.782],[82.726,-45.87],[82.121,-45.628],[81.492,-46.548],[80.717,-47.637],[79.652,-48.581],[73.19,-48.411],[72.827,-48.193],[71.036,-44.272],[72.9,-41.296],[75.489,-42.191],[77.716,-42.99],[77.716,-41.392],[77.571,-39.795],[77.547,-39.48],[79.168,-39.432],[80.62,-38.004],[80.596,-37.883],[80.524,-36.334],[81.564,-34.882],[82.411,-35.027],[84.831,-34.785],[85.703,-35.414],[88.317,-37.302],[88.317,-35.487],[89.89,-36.479],[95.481,-35.705],[95.433,-34.737],[97.175,-33.696],[99.305,-32.8],[101.193,-31.856],[102.863,-29.702],[104.073,-28.395],[111.891,-25.66],[112.737,-23.482],[111.019,-20.747],[110.366,-19.489],[110.147,-18.666],[108.55,-14.309],[106.397,-13.39],[104.315,-12.349],[103.782,-11.211],[102.403,-8.694],[101.919,-8.307],[101.507,-7.847],[98.071,-5.645],[95.892,-3.055],[94.15,-1.796],[92.577,-1.796],[93.327,-0.49],[91.221,1.785],[92.553,2.681],[90.713,4.254],[90.301,5.948],[107.945,9.119],[136.359,0.382],[142.265,-4.265],[142.434,-4.459],[142.991,-4.967],[145.895,-8.017],[145.944,-8.065],[147.154,-9.517],[146.888,-10.026],[146.113,-11.332],[144.249,-16.73],[144.83,-20.699],[145.218,-21.498],[143.136,-26.604],[142.555,-30.574],[142.507,-31.639],[141.248,-31.881],[139.336,-32.486],[137.618,-33.236],[132.269,-32.292],[131.616,-32.123],[129.583,-32.365],[126.122,-35.826],[124.646,-38.536],[125.299,-43.692],[128.252,-47.733],[129.413,-49.355],[132.415,-52.114],[141.151,-53.615],[143.039,-53.203],[143.112,-51.219],[147.59,-49.355],[149.235,-49.767],[151.026,-50.468],[156.883,-49.67],[157.924,-49.694],[157.271,-52.913]],"c":true},"ix":2},"nm":"Path 5","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.3137,0.2745,0.8941,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":6,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[2.208,1.149],[0.442,0.67],[0.941,1.627],[-0.038,0.402],[0.115,0.268],[-0.941,0.613],[-0.115,0.134],[0.653,1.263],[0.73,-0.727],[0.058,0.057],[1.056,0.823],[0.691,0.402],[0.96,0.383],[0.557,0.038],[0.134,0.096],[0.73,3.292],[0.154,0.172],[0.749,0.766],[0.269,0.211],[0.038,-0.306],[0,0],[-0.48,-0.708],[0.077,-0.077],[0.48,0.325],[0,-2.393],[-13.191,-9.092],[-0.038,-0.019],[-0.134,-0.077],[-0.096,-0.057],[-0.826,-0.44],[-0.115,0.9],[-0.269,1.684],[-0.134,0.574],[-0.365,1.646],[-0.23,1.742]],"o":[[-0.691,-0.364],[-1.056,-1.57],[-0.192,-0.325],[0.038,-0.364],[-0.518,-1.206],[0.154,-0.096],[0.96,-1.072],[-0.634,-1.206],[-0.038,0.057],[-1.075,-0.823],[-0.653,-0.498],[-0.883,-0.498],[-0.499,-0.191],[-0.211,-0.019],[-2.208,-1.321],[-0.038,-0.191],[-0.71,-0.785],[-0.25,-0.249],[-0.058,0.306],[0,0],[0.461,0.708],[-0.077,0.076],[-0.461,-0.326],[-0.327,2.297],[0,17.207],[0.019,0.038],[0.134,0.096],[0.096,0.076],[0.787,0.498],[-0.077,-0.976],[0.211,-1.684],[0.115,-0.574],[0.365,-1.627],[0.384,-1.704],[0.288,-2.411]],"v":[[86.925,-18.387],[85.236,-20.148],[82.26,-24.971],[82.125,-26.158],[82.413,-27.21],[83.392,-29.718],[83.757,-30.139],[84.084,-33.584],[82.144,-33.776],[81.876,-33.795],[78.688,-36.264],[76.73,-37.719],[73.927,-39.039],[72.295,-39.269],[71.642,-39.154],[65.517,-43.825],[65.075,-44.361],[62.925,-46.696],[62.137,-47.366],[61.984,-46.447],[61.984,-46.428],[63.386,-44.284],[63.155,-44.054],[61.754,-45.03],[61.254,-37.968],[83.085,3.548],[83.181,3.625],[83.585,3.874],[83.872,4.065],[86.311,5.462],[86.1,2.649],[87.041,-2.385],[87.098,-4.185],[88.365,-9.065],[89.287,-14.233]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.3137,0.2745,0.8941,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":2,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.387,-0.242],[0.847,-0.629],[-0.678,-0.799],[-0.024,-0.145],[0.847,-0.073],[0.508,-0.097],[-0.194,-0.654],[2.106,-0.29],[0.581,-0.194],[0.557,-0.073],[0.242,-0.024],[0.363,-1.307],[0.024,-0.024],[0.532,-0.557],[0.193,0.121],[0.145,0.048],[1.017,1.017],[0.17,0.266],[0.363,0.605],[0.266,0.605],[-0.533,0.726],[0.557,-0.194],[3.05,-0.121],[0,0],[0.992,-0.121],[0.242,0.145],[0.532,0.266],[-0.557,1.017],[-0.992,0.944],[-1.307,-0.097],[-0.121,0],[-0.823,2.033],[-0.46,-0.291],[-1.549,0],[-1.234,0],[-2.614,0.024],[-0.266,-1.041],[-1.476,1.138],[-0.992,-0.339],[-0.266,-0.169]],"o":[[-0.823,0.605],[-0.532,0.436],[0.096,0.097],[0.121,0.847],[-0.387,0.048],[0.194,0.605],[-1.864,0.944],[-0.629,0.073],[-0.532,0.193],[-0.266,0.024],[-0.992,0.097],[0,0.024],[-0.194,0.678],[-0.17,0.218],[-0.145,-0.048],[-1.331,-0.363],[-0.193,-0.169],[-0.363,-0.605],[-0.363,-0.581],[-0.121,-0.266],[-0.557,0.121],[-0.798,-2.493],[0,0],[-0.969,0.048],[-0.242,0],[-0.605,-0.339],[1.21,-0.533],[0.847,-1.501],[0.823,-0.75],[0.145,0.024],[2.033,0.218],[0.387,0.218],[0.968,-1.718],[1.234,-0.024],[2.614,-0.024],[1.477,0],[0.484,1.767],[0.823,-0.629],[0.242,0.073],[-0.484,0.387]],"v":[[19.846,-83.602],[17.256,-81.787],[16.99,-80.141],[17.159,-79.73],[15.514,-77.551],[14.279,-77.309],[14.787,-75.567],[8.737,-73.8],[6.946,-73.146],[5.324,-72.638],[4.55,-72.566],[2.299,-70.968],[2.275,-70.92],[0.895,-69.153],[0.097,-68.79],[-0.315,-68.911],[-4.067,-70.508],[-4.623,-71.186],[-5.712,-73.001],[-6.68,-74.816],[-5.494,-76.511],[-7.237,-76.027],[-12.804,-79.463],[-12.828,-79.463],[-15.756,-79.1],[-16.531,-79.415],[-18.273,-80.407],[-14.498,-82.174],[-11.158,-84.377],[-7.164,-84.885],[-6.801,-84.861],[-3.873,-86.603],[-2.711,-85.829],[1.476,-87.378],[5.179,-87.45],[13.045,-87.523],[15.078,-85.321],[17.716,-84.425],[20.354,-84.933],[21.129,-84.57]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[1.912,0.896],[0,0.024],[0.024,0.073],[0.097,0.218],[-0.242,0],[-1.21,-0.048],[-0.75,-0.169]],"o":[[0,0],[-0.048,-0.073],[-0.097,-0.291],[0.291,-0.097],[1.234,0],[0.484,0.097],[-2.033,1.67]],"v":[[14.715,-71.501],[14.642,-71.549],[14.497,-71.767],[14.231,-72.541],[15.054,-72.856],[18.757,-72.783],[20.475,-72.324]],"c":true},"ix":2},"nm":"Path 2","mn":"ADBE Vector Shape - Group","hd":false},{"ind":2,"ty":"sh","ix":3,"ks":{"a":0,"k":{"i":[[0.242,0],[0.242,0.024],[0.121,0],[0.411,0.048],[-0.532,0],[-0.072,-0.024],[-0.024,0],[-0.024,0],[-0.121,-0.024],[-0.073,-0.097],[-0.048,-0.048],[0,0],[-0.048,-0.048],[-0.048,-0.048],[-0.048,-0.145]],"o":[[-0.291,-0.024],[-0.121,0],[-0.388,-0.024],[0.508,-0.605],[0.121,0],[0.024,0],[0.024,0.048],[0.073,0],[0.073,0.097],[0.048,0.073],[0,0],[0.048,0.024],[0.048,0.073],[0.073,0.097],[-0.266,-0.048]],"v":[[-16.966,-40.86],[-17.814,-40.932],[-18.176,-40.957],[-19.387,-41.102],[-17.789,-42.022],[-17.427,-41.997],[-17.33,-41.949],[-17.209,-41.876],[-16.966,-41.804],[-16.7,-41.538],[-16.555,-41.392],[-16.555,-41.344],[-16.434,-41.223],[-16.313,-41.078],[-16.168,-40.763]],"c":true},"ix":2},"nm":"Path 3","mn":"ADBE Vector Shape - Group","hd":false},{"ind":3,"ty":"sh","ix":4,"ks":{"a":0,"k":{"i":[[0.46,0.169],[0.314,0.097],[0.097,0.048],[0.29,0.048],[0.073,0.073],[0.387,0.097],[0.048,0.024],[-0.048,0],[-1.234,-0.629],[-0.726,-0.629]],"o":[[-0.339,-0.073],[-0.121,-0.048],[-0.314,-0.097],[-0.073,-0.024],[-0.435,-0.097],[-0.048,-0.024],[0.048,-0.024],[0.75,-0.436],[0.654,0.315],[-0.485,-0.169]],"v":[[-21.976,-42.699],[-22.993,-42.966],[-23.332,-43.087],[-24.227,-43.329],[-24.445,-43.425],[-25.631,-43.764],[-25.777,-43.813],[-25.655,-43.885],[-22.606,-43.619],[-20.524,-42.191]],"c":true},"ix":2},"nm":"Path 4","mn":"ADBE Vector Shape - Group","hd":false},{"ind":4,"ty":"sh","ix":5,"ks":{"a":0,"k":{"i":[[1.234,2.638],[0.435,-0.266],[1.67,-0.46],[0.992,1.016],[1.162,0.871],[0.17,-0.218],[-1.186,-0.968],[0.097,-0.29],[0.944,0.581],[0.242,0.363],[1.307,0.992],[0.242,-0.242],[1.017,-0.992],[0.484,-0.169],[0.532,-0.145],[0.46,0.121],[-0.46,1.113],[0.073,0.411],[-0.895,-0.024],[-0.895,0.097],[-0.048,0.387],[0.363,0.436],[0.678,0.339],[-1.549,0.46],[1.235,1.501],[-0.46,0.605],[0.532,0.169],[0.218,-0.145],[0.726,-0.363],[-0.218,0.339],[-0.581,0.363],[-0.097,0.097],[0.121,0.339],[-0.435,0],[-0.024,-0.242],[-0.798,-1.186],[-0.654,0.315],[-0.944,0.46],[-1.597,-0.073],[-1.114,0.024],[-1.67,0],[-1.38,-0.242],[0.847,1.162],[0.823,-0.339],[-0.363,-0.29],[2.276,0.121],[0.266,0.605],[0.072,-0.024],[0.726,0.605],[-0.121,0.557],[-0.605,0.363],[-1.234,0.823],[-0.46,0.412],[0.17,0.169],[1.041,0.992],[0,0],[1.718,1.016],[0.581,0.315],[0.532,0.266],[0.17,0.073],[0.024,0],[0.46,0.218],[0.629,0.266],[0.726,0.242],[0.557,0.193],[0.654,0.169],[0.654,0.145],[1.38,0.194],[2.13,0.024],[0.314,0],[2.541,-0.411],[0.145,-0.024],[0,0],[0.194,-0.048],[0.072,-0.024],[0.726,-0.169],[0.145,-0.048],[0.436,-0.121],[0.217,-0.097],[0.435,-0.121],[2.13,-1.041],[0.387,-0.218],[0.145,-0.073],[0.581,-0.339],[1.525,-1.113],[-0.073,-0.097],[0.266,-0.097],[0.484,-0.412],[-1.961,-0.726],[-1.016,-0.315],[-0.557,-0.242],[-0.145,-0.702],[-0.218,-0.121],[-1.065,-0.363],[1.282,-0.363],[-0.508,-0.532],[0.121,-0.169],[1.331,0.242],[0.508,0.073],[0.798,0.169],[0.29,0.169],[-0.242,0.097],[-0.919,0.315],[0.048,0.266],[0.847,-0.242],[-0.17,0.557],[0,0],[-0.363,-0.605],[1.259,-0.194],[-1.186,-0.436],[0.024,-0.097],[1.38,0.073],[0.242,0.315],[0.363,-0.145],[1.089,-0.702],[-1.113,-0.508],[-1.839,-0.315],[-0.557,-1.452],[-0.314,0.024],[0.024,0.266],[0.073,0.363],[-0.291,0.363],[0.266,0.387],[-1.137,-0.097],[-0.387,-0.073],[-0.992,-0.218],[-1.984,1.525],[-1.379,-1.113],[-0.266,-0.218],[-0.411,-0.315],[0.242,-0.411],[-0.121,-0.073],[-0.654,-0.46],[0.145,-0.073],[0,0],[-0.121,0.169],[-0.484,0.847],[0.291,-0.121],[0.944,-0.387],[0.194,0.121],[1.283,-1.477],[-0.412,0.024],[-0.217,-0.073],[-0.024,-0.073],[-0.992,0],[-0.193,-0.193],[-0.169,-0.145],[0.339,-0.097],[0.654,0.944],[0.46,-0.145],[0.048,-0.726],[-0.073,-0.387],[0.217,0],[1.065,-0.629],[0.46,-0.46],[0.678,-0.436],[-0.363,-0.823],[-0.072,-0.266],[-0.17,-0.629],[0.17,-0.073],[0.217,0.315],[0.266,0.363],[0.411,0.194],[2.154,0.557],[0.121,-0.048],[0.145,-1.452],[-1.113,-0.654],[-0.218,0.774],[-0.678,-0.242],[0.194,-0.605],[0.024,-0.557],[0,-0.097],[-0.532,0.024],[0.145,-0.968],[0.024,-0.048],[-0.17,-0.484],[-0.266,0],[-0.266,0.048],[-0.798,-0.508],[-0.315,0.194],[-1.065,0.75],[0,0],[-0.145,-0.145],[-1.743,-0.871],[0,-0.266],[-0.411,-0.436],[-0.944,0.121],[-0.653,-0.581],[-0.145,-0.581],[-0.508,-0.097],[-2.493,-1.21],[0.532,-1.041],[0.532,-0.944],[0.17,-0.411],[0.025,-0.266],[1.065,-1.186],[0.726,-0.339],[0.654,-0.46],[-0.048,-0.363],[0.654,-0.702],[0.17,-0.121],[0.097,-0.194],[1.743,0.218],[1.743,0.048],[0.097,-0.992],[0,0],[-0.217,-0.387],[0.726,-0.75],[-0.532,-0.339],[0.557,-0.46],[-0.46,-0.581],[-6.244,0],[-8.108,5.518],[-1.864,1.694],[-0.048,0.048],[-0.17,0.194],[-0.919,1.065],[0,0.024],[-0.363,0.508],[0.121,0.169],[-0.024,0.411],[0.775,1.718],[-1.283,1.21],[0.121,0.169],[1.621,1.283],[-0.46,1.452],[0.17,0.121],[0.315,-0.169],[0.581,0.726],[0.411,-0.169],[1.864,0.145],[0.121,-0.121],[0.557,0.605],[1.38,0.823],[-0.363,0.726],[-0.291,1.67],[-1.767,0.823],[-0.121,0.654],[-1.355,0.266],[-2.904,0.411],[-0.435,-0.387],[0,-0.847],[-1.646,-0.532],[-0.532,0.194],[-0.557,-0.073],[-1.961,-0.266],[-0.315,0.073],[0.242,1.041]],"o":[[-0.46,0.242],[0.726,1.525],[-0.872,-1.186],[-0.993,-1.016],[-0.145,0.218],[1.162,0.968],[-0.17,0.363],[-0.944,-0.581],[-0.435,-0.315],[-1.259,-2.009],[-0.097,-0.073],[-0.992,1.041],[-0.363,0.363],[-0.533,0.194],[-0.435,-0.193],[-1.016,-0.29],[0.17,-0.412],[-0.073,-0.92],[0.944,0],[0.46,-0.097],[0.048,-0.436],[-0.242,-0.266],[1.573,-0.46],[-1.743,-0.605],[0.46,-0.484],[-0.654,-0.194],[-0.073,0.532],[-0.677,0.436],[-0.145,-0.557],[0.387,-0.484],[0.145,-0.024],[-0.121,-0.411],[0.508,-0.266],[0.605,-0.024],[0.073,1.743],[0.629,0.871],[0.896,-0.411],[-0.363,-1.452],[-0.218,1.21],[1.621,-0.073],[0.048,-1.597],[-0.726,-1.283],[-0.557,0.266],[0.629,0.533],[-1.67,2.783],[-0.266,-0.702],[-0.266,0.048],[-0.678,0.726],[-0.532,-0.411],[0.121,-0.581],[1.234,-0.871],[0.46,-0.315],[-0.097,-0.145],[-0.944,-1.089],[0,0],[-1.573,-1.21],[-0.557,-0.363],[-0.532,-0.29],[-0.17,-0.097],[-0.024,-0.024],[-0.484,-0.242],[-0.629,-0.291],[-0.678,-0.266],[-0.557,-0.194],[-0.653,-0.194],[-0.654,-0.169],[-1.331,-0.315],[-2.057,-0.29],[-0.29,-0.024],[-2.638,0],[-0.145,0.024],[0,0],[-0.217,0.048],[-0.073,0],[-0.75,0.121],[-0.145,0.024],[-0.435,0.097],[-0.217,0.048],[-0.436,0.097],[-2.299,0.702],[-0.412,0.169],[-0.145,0.073],[-0.605,0.315],[-1.621,0.944],[0.097,0.024],[-0.242,0.073],[-0.484,0.363],[1.767,-0.896],[0.968,0.387],[0.581,0.194],[0.435,0.194],[0.025,0.145],[1.065,0.363],[-0.944,2.057],[0.677,0.678],[-0.097,0.145],[-1.404,-0.169],[-0.508,-0.073],[-0.823,-0.145],[-0.315,-0.048],[0.242,-0.218],[0.919,-0.363],[-0.048,-0.218],[-0.726,0.266],[0.145,-0.557],[0,0],[0.339,0.605],[-1.259,0.145],[1.355,0.508],[-0.024,0.121],[-1.089,-0.073],[-0.024,-0.024],[-0.387,0.218],[-1.137,0.581],[-1.041,0.654],[1.695,0.726],[1.525,0.242],[0.048,0.194],[0.17,-0.048],[-0.073,-0.484],[0.581,-0.266],[0.169,-0.266],[-0.629,-0.944],[0.412,0.048],[1.041,0.145],[0.387,2.033],[1.428,1.138],[0.266,0.218],[0.387,0.315],[-0.218,0.46],[0.145,0.097],[0.702,0.484],[-0.073,0.097],[0,0],[0.097,-0.193],[0.412,-0.702],[-0.29,0.121],[-1.21,0.581],[-0.242,-0.242],[-0.944,-0.702],[0.726,-0.218],[0.193,0],[0.194,0.073],[0.242,1.38],[0.194,0],[0.145,0.121],[-0.435,0.169],[-2.88,1.041],[-0.46,0.121],[-0.532,0.169],[-0.048,0.266],[-0.266,-0.097],[-1.743,-0.169],[-0.217,0.653],[-0.605,0.581],[-0.799,0.46],[0.121,0.266],[0.145,0.629],[-0.194,0.048],[-0.218,-0.29],[-0.242,-0.363],[-0.314,-0.363],[-2.154,-1.137],[-0.145,-0.024],[-1.864,0.726],[-0.17,1.452],[0.726,0.436],[0.363,-1.404],[1.016,0.266],[-0.169,0.484],[0,0.097],[0.557,0.024],[0.992,-0.121],[0,0.048],[-0.048,0.532],[0.193,0.581],[0.29,-0.048],[0.799,-0.169],[0.145,0.073],[0.775,-0.581],[0,0],[0.581,-0.412],[1.767,1.452],[0,0.29],[0.702,0.387],[0.654,0.654],[0.509,-0.048],[0.823,0.653],[0.145,0.557],[2.71,0.654],[0.823,0.411],[-0.508,0.944],[-0.242,0.412],[-0.121,0.29],[-0.169,1.622],[-0.46,0.557],[-0.702,0.29],[-0.29,0.242],[0.194,1.259],[-0.145,0.145],[-0.145,0.121],[-0.654,1.501],[0.217,1.743],[-1.016,0],[0,0],[0.314,0.532],[-0.678,0.75],[0.46,0.315],[-0.702,0.605],[-0.75,0.557],[5.494,2.081],[10.528,0],[2.057,-1.404],[0.048,-0.097],[0.194,-0.169],[1.017,-0.944],[0.048,0],[0.412,-0.484],[-0.097,-0.169],[-0.242,-0.436],[0.145,-2.081],[-0.654,-1.38],[0.194,-0.218],[-0.799,-1.646],[-1.5,-1.186],[0.073,-0.315],[-0.314,-0.266],[-0.919,0.46],[-0.314,-0.46],[-1.718,0.823],[-0.17,-0.024],[-0.823,0.92],[-1.138,-1.186],[-1.234,-0.726],[0.919,-1.718],[0.266,-1.573],[0.557,-0.266],[0.387,-1.646],[2.88,-0.678],[0.605,-0.097],[0.291,0.242],[1.307,0.581],[0.46,0.169],[0.654,-0.194],[1.936,0.145],[0.388,0.073],[-0.194,-1.113],[-2.856,0.024]],"v":[[46.469,-56.035],[45.114,-55.309],[44.122,-53.155],[41.556,-56.737],[38.095,-59.278],[37.635,-58.649],[41.12,-55.793],[40.684,-54.68],[37.804,-56.35],[36.618,-57.294],[32.577,-57.56],[31.681,-57.027],[28.728,-53.881],[27.325,-53.252],[25.703,-52.84],[24.347,-53.47],[23.307,-55.309],[23.307,-56.568],[24.541,-57.923],[27.3,-57.85],[28.583,-58.794],[27.857,-60.295],[26.429,-60.948],[30.81,-62.231],[26.09,-63.417],[27.349,-64.893],[25.679,-65.329],[25.436,-64.07],[23.258,-62.981],[22.993,-64.627],[24.759,-65.716],[25.074,-65.934],[24.759,-67.023],[26.211,-67.677],[28.002,-67.217],[30.495,-63.707],[32.31,-63.441],[35.07,-64.821],[36.546,-66.539],[38.095,-64.918],[42.984,-64.966],[45.089,-67.023],[42.669,-70.702],[40.684,-69.928],[42.016,-68.863],[37.635,-65.934],[36.812,-67.943],[36.353,-67.894],[34.053,-67.459],[33.23,-69.395],[34.779,-70.823],[38.531,-73.243],[39.862,-74.308],[39.474,-74.72],[36.522,-77.842],[36.497,-77.866],[31.56,-81.23],[29.842,-82.222],[28.244,-83.07],[27.76,-83.312],[27.688,-83.336],[26.26,-84.013],[24.396,-84.812],[22.291,-85.587],[20.596,-86.168],[18.636,-86.724],[16.651,-87.208],[12.585,-87.959],[6.316,-88.443],[5.421,-88.467],[-2.348,-87.862],[-2.784,-87.813],[-2.881,-87.813],[-3.486,-87.692],[-3.679,-87.644],[-5.906,-87.184],[-6.366,-87.087],[-7.697,-86.748],[-8.374,-86.555],[-9.705,-86.192],[-16.361,-83.578],[-17.547,-82.997],[-17.983,-82.779],[-19.75,-81.811],[-24.469,-78.737],[-24.203,-78.592],[-24.929,-78.399],[-26.406,-77.237],[-20.815,-77.116],[-17.838,-76.123],[-16.047,-75.688],[-15.103,-74.453],[-14.522,-74.139],[-11.327,-73.025],[-15.03,-72.42],[-13.312,-70.654],[-13.602,-70.17],[-17.693,-70.75],[-19.242,-70.992],[-21.734,-71.404],[-22.533,-71.864],[-21.88,-72.445],[-19.097,-73.389],[-19.29,-74.066],[-21.614,-73.364],[-21.202,-74.865],[-25.002,-74.865],[-24.106,-73.292],[-27.664,-72.808],[-23.937,-71.355],[-24.034,-70.968],[-27.567,-71.21],[-28.1,-71.912],[-29.14,-71.355],[-32.626,-69.589],[-32.553,-67.701],[-27.205,-65.934],[-24.131,-63.659],[-23.187,-63.368],[-22.848,-64.167],[-23.187,-65.498],[-21.686,-66.273],[-22.195,-67.58],[-20.984,-70.17],[-19.798,-70.024],[-16.7,-69.395],[-13.748,-68.863],[-9.561,-65.547],[-8.738,-64.869],[-7.527,-63.901],[-8.205,-62.497],[-7.794,-62.231],[-5.785,-60.851],[-6.051,-60.537],[-9.899,-60.537],[-9.609,-61.045],[-8.399,-63.223],[-9.27,-62.836],[-12.392,-61.408],[-13.046,-61.965],[-16.047,-60.876],[-14.473,-61.335],[-13.772,-61.19],[-13.409,-60.948],[-11.158,-59.665],[-10.601,-59.327],[-10.166,-58.915],[-11.352,-58.504],[-14.958,-58.504],[-16.41,-58.189],[-17.402,-57.003],[-17.33,-56.035],[-18.055,-56.204],[-20.984,-53.615],[-21.976,-51.848],[-23.937,-50.347],[-24.445,-48.581],[-24.179,-47.782],[-23.767,-45.87],[-24.373,-45.628],[-25.002,-46.548],[-25.777,-47.637],[-26.841,-48.581],[-33.303,-48.411],[-33.667,-48.193],[-35.458,-44.272],[-33.594,-41.296],[-31.004,-42.191],[-28.778,-42.99],[-28.778,-41.392],[-28.923,-39.795],[-28.947,-39.48],[-27.325,-39.432],[-25.873,-38.004],[-25.898,-37.883],[-25.97,-36.334],[-24.929,-34.882],[-24.082,-35.027],[-21.662,-34.785],[-20.791,-35.414],[-18.176,-37.302],[-18.176,-35.487],[-16.604,-36.479],[-11.013,-35.705],[-11.061,-34.737],[-9.318,-33.696],[-7.189,-32.8],[-5.301,-31.856],[-3.631,-29.702],[-2.42,-28.395],[5.397,-25.66],[6.244,-23.482],[4.525,-20.747],[3.872,-19.489],[3.654,-18.666],[2.057,-14.309],[-0.097,-13.39],[-2.179,-12.349],[-2.711,-11.211],[-4.091,-8.694],[-4.575,-8.307],[-4.986,-7.847],[-8.423,-5.645],[-10.601,-3.055],[-12.344,-1.796],[-13.917,-1.796],[-13.167,-0.49],[-15.272,1.785],[-13.941,2.681],[-15.78,4.254],[-16.192,5.948],[1.452,9.119],[29.866,0.382],[35.771,-4.265],[35.941,-4.459],[36.497,-4.967],[39.402,-8.017],[39.45,-8.065],[40.66,-9.517],[40.394,-10.026],[39.62,-11.332],[37.756,-16.73],[38.337,-20.699],[38.724,-21.498],[36.643,-26.604],[36.062,-30.574],[36.013,-31.639],[34.755,-31.881],[32.843,-32.486],[31.124,-33.236],[25.776,-32.292],[25.122,-32.123],[23.089,-32.365],[19.628,-35.826],[18.152,-38.536],[18.806,-43.692],[21.758,-47.733],[22.92,-49.355],[25.921,-52.114],[34.658,-53.615],[36.546,-53.203],[36.618,-51.219],[41.096,-49.355],[42.742,-49.767],[44.533,-50.468],[50.39,-49.67],[51.431,-49.694],[50.777,-52.913]],"c":true},"ix":2},"nm":"Path 5","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.3137,0.2745,0.8941,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 7","np":6,"cix":2,"bm":0,"ix":7,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[2.208,1.149],[0.442,0.67],[0.941,1.627],[-0.038,0.402],[0.115,0.268],[-0.941,0.613],[-0.115,0.134],[0.653,1.263],[0.73,-0.727],[0.058,0.057],[1.056,0.823],[0.691,0.402],[0.96,0.383],[0.557,0.038],[0.134,0.096],[0.73,3.292],[0.154,0.172],[0.749,0.766],[0.269,0.211],[0.038,-0.306],[0,0],[-0.48,-0.708],[0.077,-0.077],[0.48,0.325],[0,-2.393],[-13.191,-9.092],[-0.038,-0.019],[-0.134,-0.077],[-0.096,-0.057],[-0.826,-0.44],[-0.115,0.9],[-0.269,1.684],[-0.134,0.574],[-0.365,1.646],[-0.23,1.742]],"o":[[-0.691,-0.364],[-1.056,-1.57],[-0.192,-0.325],[0.038,-0.364],[-0.518,-1.206],[0.154,-0.096],[0.96,-1.072],[-0.634,-1.206],[-0.038,0.057],[-1.075,-0.823],[-0.653,-0.498],[-0.883,-0.498],[-0.499,-0.191],[-0.211,-0.019],[-2.208,-1.321],[-0.038,-0.191],[-0.71,-0.785],[-0.25,-0.249],[-0.058,0.306],[0,0],[0.461,0.708],[-0.077,0.076],[-0.461,-0.326],[-0.327,2.297],[0,17.207],[0.019,0.038],[0.134,0.096],[0.096,0.076],[0.787,0.498],[-0.077,-0.976],[0.211,-1.684],[0.115,-0.574],[0.365,-1.627],[0.384,-1.704],[0.288,-2.411]],"v":[[-19.568,-18.387],[-21.258,-20.148],[-24.234,-24.971],[-24.368,-26.158],[-24.08,-27.21],[-23.101,-29.718],[-22.736,-30.139],[-22.41,-33.584],[-24.349,-33.776],[-24.618,-33.795],[-27.805,-36.264],[-29.764,-37.719],[-32.567,-39.039],[-34.199,-39.269],[-34.852,-39.154],[-40.977,-43.825],[-41.418,-44.361],[-43.569,-46.696],[-44.356,-47.366],[-44.51,-46.447],[-44.51,-46.428],[-43.108,-44.284],[-43.338,-44.054],[-44.74,-45.03],[-45.239,-37.968],[-23.408,3.548],[-23.312,3.625],[-22.909,3.874],[-22.621,4.065],[-20.183,5.462],[-20.394,2.649],[-19.453,-2.385],[-19.395,-4.185],[-18.128,-9.065],[-17.207,-14.233]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.3137,0.2745,0.8941,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 8","np":2,"cix":2,"bm":0,"ix":8,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":8,"ty":4,"nm":"Layer 8","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[180.484,125.371,0],"ix":2,"l":2},"a":{"a":0,"k":[4.219,-38.176,0],"ix":1,"l":2},"s":{"a":1,"k":[{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":38,"s":[0,0,100]},{"t":62,"s":[130,130,100]}],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[4.235,-3.882],[4.427,4.876],[-4.235,3.85],[-4.427,-4.844]],"o":[[-4.235,3.818],[-4.395,-4.844],[4.235,-3.85],[4.427,4.876]],"v":[[29.686,-45.477],[13.998,-47.338],[13.678,-63.122],[29.366,-61.293]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.931,0.94,0.949,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-9.97],[0.6,-2.867],[0.513,-1.562],[0.171,-0.407],[0,0],[0.171,-0.449],[0.3,-0.642],[0.236,-0.449],[0.086,-0.171],[0.492,-0.792],[0.428,-0.642],[0.235,-0.299],[0.257,-0.342],[0.256,-0.321],[0.556,-0.62],[0.021,-0.021],[0.835,-0.77],[4.878,0],[7.831,6.397],[1.241,1.348],[0,10.912],[-9.585,7.745],[-1.091,0.727],[0,0],[-0.663,0.407],[-2.311,0],[-8.045,-7.574],[-0.878,-1.048],[-0.107,-0.171],[-0.407,-0.556],[-0.192,-0.3]],"o":[[0,3.017],[-0.321,1.647],[-0.128,0.428],[0,0],[-0.15,0.449],[-0.257,0.685],[-0.214,0.471],[-0.085,0.171],[-0.428,0.834],[-0.385,0.663],[-0.193,0.3],[-0.214,0.342],[-0.256,0.342],[-0.513,0.642],[0,0.043],[-0.77,0.856],[-4.386,1.369],[-11.19,0],[-1.455,-1.177],[-7.189,-7.51],[0,-12.901],[1.006,-0.856],[0,0],[0.642,-0.449],[2.204,-0.342],[11.938,0],[0.984,0.92],[0.171,0.171],[0.471,0.535],[0.214,0.257],[5.563,7.403]],"v":[[49.02,-38.155],[48.121,-29.297],[46.859,-24.462],[46.41,-23.221],[46.41,-23.199],[45.918,-21.873],[45.083,-19.883],[44.419,-18.492],[44.163,-17.979],[42.794,-15.518],[41.574,-13.572],[40.932,-12.652],[40.205,-11.624],[39.435,-10.619],[37.851,-8.715],[37.809,-8.629],[35.391,-6.147],[21.441,-4.029],[-7.785,-14.299],[-11.829,-18.064],[-23.361,-46.456],[-7.721,-78.678],[-4.576,-81.031],[-4.554,-81.031],[-2.586,-82.315],[4.218,-82.829],[35.027,-70.59],[37.873,-67.616],[38.279,-67.146],[39.585,-65.541],[40.183,-64.749]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.8592,0.92,0.9808,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-9.97],[0.6,-2.86],[0.51,-1.56],[0.17,-0.41],[0,0],[0.17,-0.45],[0.3,-0.64],[0.24,-0.45],[0.08,-0.17],[0.49,-0.79],[0.42,-0.64],[0.24,-0.3],[0.25,-0.35],[0.25,-0.32],[0.56,-0.62],[0.02,-0.02],[0.84,-0.77],[0.22,-0.22],[0.08,-0.04],[11.7,0],[5.59,2.48],[0.05,0.02],[1.84,1.17],[0.24,0.15],[0.06,0.08],[0.13,0.09],[0.02,0.02],[2.83,3.66],[0.87,1.48],[1.07,3.34],[0.32,1.63],[0,2.97],[-0.3,2.03],[-0.06,0.4],[0,0],[-0.04,0.28],[-8.1,6.51],[-0.43,0.33],[0,0],[-0.13,0.11],[-1.46,0.81],[-0.53,0.28],[-0.13,0.06],[-0.36,0.15],[-2.03,0.62],[-0.38,0.09],[-0.19,0.05],[-0.38,0.09],[-0.13,0.02],[-0.67,0.11],[-0.07,0],[-0.19,0.04],[0,0],[-0.15,0.02],[-2.31,0],[-2.07,-0.32],[-1.18,-0.3],[-0.58,-0.15],[-0.57,-0.17],[-0.52,-0.17],[-0.6,-0.25],[-0.55,-0.26],[-0.42,-0.21],[-0.02,-0.02],[-0.15,-0.09],[-0.47,-0.25],[-0.5,-0.32],[-1.39,-1.07],[0,0],[-1.05,-1],[-0.88,-1.04],[-0.11,-0.18],[-0.41,-0.56],[-0.2,-0.3]],"o":[[0,3.01],[-0.32,1.65],[-0.13,0.43],[0,0],[-0.15,0.45],[-0.26,0.68],[-0.22,0.47],[-0.08,0.17],[-0.43,0.84],[-0.39,0.67],[-0.2,0.3],[-0.21,0.34],[-0.26,0.34],[-0.52,0.64],[0,0.04],[-0.77,0.86],[-0.21,0.24],[-0.06,0.04],[-7.96,7.39],[-6.48,0],[-0.04,-0.05],[-2.01,-0.88],[-0.24,-0.13],[-0.06,-0.04],[-0.13,-0.07],[-0.04,-0.02],[-3.81,-2.63],[-1.04,-1.35],[-1.78,-2.95],[-0.52,-1.56],[-0.55,-2.82],[0,-2.12],[0.04,-0.43],[0,0],[0.06,-0.26],[2.01,-10.63],[0.43,-0.36],[0,-0.02],[0.13,-0.1],[1.34,-0.98],[0.51,-0.3],[0.13,-0.06],[0.34,-0.19],[1.89,-0.92],[0.38,-0.11],[0.2,-0.08],[0.39,-0.1],[0.13,-0.04],[0.64,-0.17],[0.06,-0.02],[0.17,-0.04],[0,0],[0.15,-0.04],[2.2,-0.35],[2.14,0],[1.22,0.15],[0.58,0.13],[0.58,0.15],[0.52,0.15],[0.62,0.21],[0.56,0.24],[0.41,0.19],[0.03,0],[0.15,0.07],[0.47,0.23],[0.51,0.28],[1.52,0.9],[0,0],[1.16,0.87],[0.98,0.92],[0.17,0.18],[0.47,0.53],[0.21,0.26],[5.56,7.4]],"v":[[49.018,-38.151],[48.118,-29.301],[46.858,-24.461],[46.408,-23.221],[46.408,-23.201],[45.918,-21.871],[45.088,-19.881],[44.418,-18.491],[44.168,-17.981],[42.798,-15.521],[41.578,-13.571],[40.928,-12.651],[40.208,-11.621],[39.438,-10.621],[37.848,-8.711],[37.808,-8.631],[35.388,-6.151],[34.748,-5.501],[34.558,-5.381],[4.218,6.479],[-13.992,2.629],[-14.142,2.539],[-19.872,-0.581],[-20.582,-1.011],[-20.812,-1.181],[-21.182,-1.401],[-21.262,-1.461],[-31.282,-10.941],[-34.182,-15.201],[-38.462,-24.631],[-39.732,-29.451],[-40.582,-38.151],[-40.112,-44.401],[-39.942,-45.641],[-39.942,-45.661],[-39.792,-46.481],[-23.922,-72.881],[-22.612,-73.911],[-22.592,-73.931],[-22.222,-74.231],[-18.032,-76.921],[-16.472,-77.781],[-16.082,-77.971],[-15.042,-78.481],[-9.152,-80.791],[-7.982,-81.121],[-7.382,-81.291],[-6.202,-81.591],[-5.792,-81.671],[-3.822,-82.081],[-3.652,-82.121],[-3.122,-82.231],[-3.032,-82.231],[-2.582,-82.311],[4.218,-82.831],[10.548,-82.361],[14.148,-81.691],[15.898,-81.271],[17.628,-80.771],[19.178,-80.281],[20.988,-79.581],[22.638,-78.871],[23.898,-78.271],[23.968,-78.251],[24.398,-78.031],[25.808,-77.291],[27.328,-76.411],[31.688,-73.431],[31.708,-73.411],[35.028,-70.591],[37.878,-67.621],[38.278,-67.141],[39.588,-65.541],[40.188,-64.751]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.802,0.88,0.958,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":1,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":9,"ty":4,"nm":"Layer 9","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[179.218,181.422,0],"ix":2,"l":2},"a":{"a":0,"k":[4.218,1.422,0],"ix":1,"l":2},"s":{"a":1,"k":[{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":49,"s":[0,0,100]},{"t":62,"s":[100,100,100]}],"ix":6,"l":2,"x":"var $bm_rt;\nvar fx = effect('ŝlosilo pli pura 2');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;"}},"ao":0,"ef":[{"ty":5,"nm":"ŝlosilo pli pura","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":1,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]},{"ty":5,"nm":"ŝlosilo pli pura 2","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":2,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]}],"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[7.629,-4.398],[7.568,4.413],[-7.613,4.398],[-7.583,-4.398]],"o":[[-7.613,4.413],[-7.568,-4.398],[7.629,-4.413],[7.568,4.398]],"v":[[17.925,9.382],[-9.586,9.382],[-9.511,-6.542],[18.031,-6.542]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.2679,0.2307,0.7893,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":10,"ty":4,"nm":"Layer 5","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[164.339,202.171,0],"ix":2,"l":2},"a":{"a":0,"k":[-10.661,27.171,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-13.705,-7.912],[-16.66,2.656],[0,0],[0,0]],"o":[[13.15,7.592],[0,0],[0,0],[-5.507,9.963]],"v":[[-27.541,37.579],[20.882,44.976],[5.865,16.264],[-39.835,8.334]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.3271,0.2866,0.8934,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":38,"op":250,"st":0,"bm":0},{"ddd":0,"ind":11,"ty":4,"nm":"Layer 3","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":50,"s":[181.736,191.142,0],"to":[1.042,0.708,0],"ti":[-1.042,-0.708,0]},{"t":57,"s":[187.986,195.392,0]}],"ix":2,"l":2,"x":"var $bm_rt;\nvar fx = effect('ŝlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;"},"a":{"a":0,"k":[12.986,20.392,0],"ix":1,"l":2},"s":{"a":1,"k":[{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":38,"s":[0,0,100]},{"t":50,"s":[100,100,100]}],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"ŝlosilo pli pura","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":1,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]}],"shapes":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[6.281,-3.65],[8.026,-1.282],[0,0]],"o":[[-2.186,4.653],[-6.289,3.655],[0,0],[0,0]],"v":[[62.623,29.001],[49.924,41.702],[28.032,49.104],[13.015,20.392]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0.38,0.8863,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-2.186,4.653],[0,0],[6.281,-3.65],[8.026,-1.282],[0,0],[-6.289,3.655]],"o":[[0,0],[-2.186,4.653],[-6.289,3.655],[0,0],[8.026,-1.282],[6.281,-3.65]],"v":[[62.623,29.001],[62.594,34.601],[49.895,47.301],[28.003,54.703],[28.032,49.104],[49.924,41.702]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.8896,0.1504,0.7541,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[28.032,49.104],[28.003,54.703],[12.986,25.992],[13.015,20.392]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.6471,0.0431,0.5373,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":1,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":12,"ty":4,"nm":"Layer 4","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[182.485,195.014,0],"ix":2,"l":2},"a":{"a":0,"k":[7.485,20.014,0],"ix":1,"l":2},"s":{"a":1,"k":[{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":26,"s":[0,0,100]},{"t":38,"s":[100,100,100]}],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-19.48,-11.247],[4.531,-9.659],[0,0],[0,0],[13.15,7.592],[-19.353,11.247]],"o":[[13.15,7.592],[0,0],[0,0],[-16.66,2.656],[-19.48,-11.247],[19.345,-11.242]],"v":[[42.537,-3.146],[55.473,24.873],[5.865,16.264],[20.882,44.976],[-27.541,37.579],[-27.762,-3.15]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.3271,0.2866,0.8934,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.021,7.416],[0,0],[-9.801,-5.658],[-16.66,2.656],[0,0],[13.15,7.592]],"o":[[0,0],[-0.021,7.416],[13.15,7.592],[0,0],[-16.66,2.656],[-9.801,-5.658]],"v":[[-42.243,22.676],[-42.214,17.077],[-27.541,37.579],[20.882,44.976],[20.852,50.575],[-27.57,43.178]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.2679,0.2307,0.7893,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[55.473,24.873],[55.444,30.473],[5.836,21.864],[5.865,16.264]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.0471,0.1373,0.251,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":1,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.007,2.531],[0,0],[1.153,-2.458],[0,0]],"o":[[0,0],[-0.007,2.531],[0,0],[1.153,-2.458]],"v":[[57.213,17.354],[57.184,22.953],[55.444,30.473],[55.473,24.873]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.2679,0.2307,0.7893,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":1,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":13,"ty":4,"nm":"Layer 2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":0,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":6,"s":[10]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":14,"s":[-10]},{"t":21,"s":[0]}],"ix":10,"x":"var $bm_rt;\nvar fx = effect('ŝlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;"},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":0,"s":[175,191.216,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":10,"s":[175,171.216,0],"to":[0,0,0],"ti":[0,0,0]},{"t":21,"s":[175,191.216,0]}],"ix":2,"l":2,"x":"var $bm_rt;\nvar fx = effect('ŝlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;"},"a":{"a":0,"k":[0,16.216,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"ŝlosilo pli pura","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":1,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]}],"shapes":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-5.331,-3.078],[0.017,-6.126],[0.662,0.382],[-0.002,0.761],[1.31,2.269],[2.009,1.166],[1.324,-0.748],[0.007,-2.308],[-1.31,-2.275],[-2.009,-1.16],[0,0],[0.002,-0.761],[0.657,0.379],[0,0],[-0.017,6.126]],"o":[[5.331,3.078],[-0.002,0.761],[-0.662,-0.382],[0.007,-2.308],[-1.31,-2.269],[-2.009,-1.154],[-1.318,0.751],[-0.007,2.308],[1.315,2.272],[0,0],[0.657,0.379],[-0.002,0.755],[0,0],[-5.331,-3.078],[0.017,-6.126]],"v":[[-90.318,2.747],[-80.699,19.408],[-81.899,20.091],[-83.09,18.027],[-85.201,10.902],[-90.326,5.495],[-95.465,4.976],[-97.604,9.648],[-95.498,16.77],[-90.373,22.171],[9.637,79.919],[10.829,81.983],[9.629,82.666],[-90.381,24.925],[-100,8.264]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.802,0.88,0.958,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.215,-0.125],[0,0],[-0.001,0.375],[0.657,0.379],[0,0],[0.002,-0.761]],"o":[[0,0],[0.215,-0.125],[0.002,-0.761],[0,0],[0.657,0.379],[-0.001,0.375]],"v":[[99.65,30.926],[10.479,82.747],[10.829,81.983],[9.637,79.919],[98.808,28.098],[100,30.162]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.8592,0.92,0.9808,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.017,-6.132],[0.211,-0.127],[0,0],[0,0.38],[5.331,3.079],[1.754,-1.021],[0,0],[-2.691,-1.544]],"o":[[0,0.38],[0,0],[0.211,-0.127],[0.017,-6.124],[-2.682,-1.544],[0,0],[1.754,-1.021],[5.331,3.079]],"v":[[8.473,-32.411],[8.127,-31.643],[-81.045,20.18],[-80.699,19.404],[-90.315,2.745],[-97.189,2.07],[-8.017,-49.744],[-1.143,-49.078]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.9569,0.9647,0.9725,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":1,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-90.373,22.171],[-1.202,-29.649],[9.548,-23.442],[-79.623,28.379]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.8592,0.92,0.9808,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":1,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-90.373,22.171],[-1.202,-29.649],[98.808,28.098],[9.637,79.919]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.9569,0.9647,0.9725,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":1,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-1.318,0.751],[0,0],[0.007,-2.308],[-1.31,-2.275],[-2.009,-1.16],[0,0],[1.315,2.272],[-0.007,2.308]],"o":[[0,0],[-1.318,0.751],[-0.007,2.308],[1.315,2.272],[0,0],[-2.009,-1.16],[-1.31,-2.275],[0.007,-2.308]],"v":[[-95.465,4.976],[-6.294,-46.845],[-8.432,-42.173],[-6.327,-35.05],[-1.202,-29.649],[-90.373,22.171],[-95.498,16.77],[-97.604,9.648]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.8592,0.92,0.9808,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":1,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0}],"markers":[]}