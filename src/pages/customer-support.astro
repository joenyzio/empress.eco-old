---

import { getCollection } from "astro:content";
import Badge from "@components/ui/badge.astro";
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";
import Sectionhead from "@components/sectionhead.astro";
import Link from "@components/ui/link.astro";
import Cta from "@components/cta.astro";
import Card from "@components/card.astro";

import { Icon } from "astro-icon";
import ArrowIcon from "../components/ui/icons/arrow.astro"

import Logos from "@components/logos.astro";
import heroImage from "../assets/hero-screenshot.png";
import IntegrationImg from "../assets/integrations.svg?url";
import FeatureImgOne from "../assets/features/2.png";
import FeatureImgTwo from "../assets/features/2.png";
import FeatureImgThree from "../assets/features/3.png";
import FeatureImg1 from "../assets/features/6.png";
import FeatureImg2 from "../assets/features/2.png";
import { Picture, Image } from "astro:assets";
import EmployeeImg from "../assets/employee.jpg";


// Filter team entries with 'draft: false' & date before current date
const publishedTeamMembers = await getCollection("team", ({ data }) => {
  return !data.draft && data.publishDate < new Date();
});


const data = [
  {
    "mainHeading": "Elevating Customer Support with Empress",
    "subtext": "Introducing Empress - your AI-powered companion that transforms customer support with precision, efficiency, and unparalleled intelligence.",
    "headingButtons": [
      {
        "text": "Join Now",
        "link": "#"
      },
      {
        "text": "Experience Free Version",
        "link": "#"
      }
    ],
    "sectionHeading": "Empress Essentials",
    "offering": {
      "title": "Holistic Support Suite",
      "subtext": "From content creation to optimization, Empress provides a comprehensive toolset tailored for superior audience engagement."
    },
    "valueBlocks": [
      {
        "heading": "Smart Bots",
        "title": "Evolve Customer Support",
        "description": "With instant access to the latest data, our bots ensure seamless content sharing across platforms."
      },
      {
        "heading": "Intelligent Analytics",
        "title": "Experience API Insights",
        "description": "Dive deep into every Smart Bot interaction using the Experience API (xapi) and gather insights to refine user interactions."
      },
      {
        "heading": "Data Integration",
        "title": "Merge, Analyze, Engage",
        "description": "Integrate data from existing platforms and harness the power of real-time and predictive analytics."
      }
    ],
    "featureBlocks": [
      {
        "heading": "Adaptive AI",
        "title": "Dynamic AI Support",
        "description": "Our AI bots adapt to your brand voice and evolve with every interaction, promising enhanced user experiences.",
        "bulletPoints": [
          "Integrate with your unique brand tone.",
          "Predict and address emerging user needs.",
          "Deliver bespoke interactions tailored to your audience."
        ],
        "buttons": [
          {
            "text": "Unlock Adaptive Interactions",
            "link": "#"
          }
        ],
      },
      {
        "heading": "Unified Experience",
        "title": "Consistent Brand Voice",
        "description": "Design user-centric support experiences that mirror your brand's essence and prioritize individual user preferences.",
        "bulletPoints": [
          "Streamlined support pathways for user delight.",
          "Uniform brand representation across touchpoints.",
          "Strategies informed by actionable data insights."
        ],
        "buttons": [
          {
            "text": "Discover Unified Experiences",
            "link": "#"
          }
        ],
      },
      {
        "heading": "Expertise on Demand",
        "title": "24/7 Expert Assistance",
        "description": "Access prompt tech support anytime, bolstered by on-demand chat capabilities, ensuring uninterrupted success.",
        "bulletPoints": [
          "Quick tech resolutions for smooth operations.",
          "Instant chat support for pressing issues.",
          "Round-the-clock commitment to your success."
        ],
        "buttons": [
          {
            "text": "Tap Into Expertise",
            "link": "#"
          }
        ]
      }
    ],
  "buttons": [
      {
        "text": "Get Started",
        "link": "#"
      }
    ],
    "featureHeading": "Support Innovations",
    "featureTitle": "Ever-Evolving Assistance",
    "featureAssurance": "Guaranteeing consistent and top-tier support for every customer interaction"
  }
];

const features = [
  {
    "title": "Integrated Tools Suite",
    "description": "Optimize communication and user engagement with a wide array of integrated tools, fine-tuned for superior support.",
    "icon": "fluent:document-javascript-24-regular"
  },
  {
    "title": "Seamless Slack Integration",
    "description": "Respond at the speed of thought. Directly integrate support queries into Slack for lightning-fast resolutions.",
    "icon": "fluent:document-javascript-24-regular"
  },
  {
    "title": "Instant Email Updates",
    "description": "Stay ahead by updating users in real-time. Cultivate trust with transparent support progress reports.",
    "icon": "fluent:document-javascript-24-regular"
  },
  {
    "title": "Messenger-Assisted Support",
    "description": "Leverage platforms like Messenger for real-time support, ensuring superior and prompt assistance.",
    "icon": "fluent:document-javascript-24-regular"
  },
  {
    "title": "Community-Centric Discord Support",
    "description": "Engage and support your community on Discord with real-time interventions, building trust and rapport.",
    "icon": "fluent:trophy-24-regular"
  },
  {
    "title": "Global User Engagement",
    "description": "Overcome language barriers with AI-assisted translations, ensuring all users feel cherished and understood.",
    "icon": "fluent:box-24-regular"
  }
];


const faq = [
  {
    question: "How does Empress elevate the customer support experience?",
    answer: "Empress leverages AI-powered tools, integrated suites, and data analytics to provide customer support that is not only responsive but also anticipative of user needs. With features like our Smart Bots and Experience API insights, we guarantee a seamless and efficient support experience that evolves with every interaction."
  },
  {
    question: "How do the Smart Bots enhance real-time customer interactions?",
    answer: "Our Smart Bots are designed to instantly access the latest data, allowing for seamless content sharing across platforms. They are adaptive, understanding your brand voice, and continuously refining their interactions based on customer feedback and behavior."
  },
  {
    question: "Can you explain the capabilities of the Experience API (xapi)?",
    answer: "The Experience API (xapi) allows you to delve into every Smart Bot interaction, providing valuable insights that can help you refine and optimize user interactions. It's a powerful tool to understand customer behavior and preferences, leading to better support strategies."
  },
  {
    question: "How does Empress ensure consistent support across platforms?",
    answer: "Empress integrates effortlessly with various platforms, from Slack to Messenger and Discord. This ensures that your customers receive the same high-quality support experience, irrespective of where they reach out."
  },
  {
    question: "I see a 'Unified Experience' feature. What does it entail?",
    answer: "Unified Experience is about delivering a consistent brand voice and user-centric support across all touchpoints. It ensures that your brand is represented uniformly, with streamlined support pathways that cater to individual user preferences. It's all about creating a cohesive and delightful support journey."
  },
  {
    question: "Is there any training to help our team get the most out of Empress?",
    answer: "Yes, Empress Academy is dedicated to this very purpose. It's equipped with resources and learning modules that will enhance your team's understanding and utilization of the Empress features, ensuring optimal user engagement and support."
  },
  {
    question: "What does the 'Ever-Evolving Assistance' mean for our support team?",
    answer: "Ever-Evolving Assistance signifies our commitment to continuous improvement. Empress is designed to adapt and grow based on user interactions and feedback. For your support team, this means always having access to the latest tools and techniques, guaranteeing top-tier support for every customer interaction."
  }
];


const featureBlocks = data[0].featureBlocks;

---

<Layout title="About" footerMargin={false}>
  <div class="overflow-x-clip">
    <Container>
      <main class="grid lg:grid-cols-5 place-items-center relative">
        <div
          class="absolute w-96 h-96 blur-2xl -z-10 bg-gradient-radial from-indigo-200 right-0 top-0">
        </div>
        <div
          class="absolute w-96 h-96 blur-2xl -z-10 bg-gradient-radial from-purple-200 right-56 top-10">
        </div>
        <div class="max-w-sm md:max-w-max lg:col-span-2">
          <h1
            class="text-3xl lg:text-4xl xl:text-6xl font-bold lg:tracking-tight xl:tracking-tighter [text-wrap:balance] text-center lg:text-start">
            {data[0].mainHeading}
          </h1>
          <p
            class="text-lg mt-4 max-w-lg text-slate-600 [text-wrap:balance] text-center lg:text-start">
            {data[0].subtext}
          </p>
          <div
            class="mt-6 flex flex-col sm:flex-row sm:justify-center lg:justify-start gap-3">
          <Link
              href={data[0].headingButtons[0].link}
              target="_blank"
              class="flex gap-1 items-center justify-center bg-brand"
              rel="noopener">
              {data[0].headingButtons[0].text}
          </Link>
          
          <Link
            size="lg"
            style="outline"
            rel="noopener"
            href={data[0].headingButtons[1].link}
            class="flex gap-1 items-center justify-center border-brand text-brand"
            target="_blank">
            {data[0].headingButtons[1].text}
          </Link>
          </div>
        </div>
        <div class="py-3 lg:col-span-3 lg:-mr-44">
          <Picture
            src={heroImage}
            alt="Astronaut in the air"
            formats={["avif", "webp"]}
            sizes="(max-width: 1024px) 100vw, 50vw"
            widths={[240, 540, 720, heroImage.width]}
            loading="eager"
            fetchpriority="high"
          />
        </div>
      </main>
    </Container>
  </div>
  

  <Container>
  
    <div class="mt-24 max-w-3xl mx-auto flex flex-col items-center justify-center">
      <Badge color="purple">{data[0].sectionHeading}</Badge>
      <h2 class="text-4xl lg:text-5xl font-bold lg:tracking-tight mt-4 text-center">
        {data[0].offering.title}
      </h2>
      <p class="text-lg mt-4 text-slate-600 text-center [text-wrap:pretty]">
        {data[0].offering.subtext}
      </p>
    </div>

    <div class="grid md:grid-cols-2 lg:grid-cols-3 mt-10 gap-10">
      <Card color="indigo" size="sm">
        <Fragment slot="image">
          <Picture
            src={FeatureImgThree}
            alt="Feature image"
            formats={["avif", "webp"]}
            class="h-full w-full object-contain"
            loading="lazy"
          />
        </Fragment>
        <span slot="badge">{data[0].valueBlocks[0].heading}</span>
        <span slot="title">{data[0].valueBlocks[0].title}</span>
        <span slot="desc">{data[0].valueBlocks[0].description}</span>
      </Card>
      
      <Card color="purple" size="sm">
        <Fragment slot="image">
          <Picture
            src={FeatureImgTwo}
            alt="Feature image"
            formats={["avif", "webp"]}
            class="h-full w-full object-contain"
            loading="lazy"
          />
        </Fragment>
        <span slot="badge">{data[0].valueBlocks[1].heading}</span>
        <span slot="title">{data[0].valueBlocks[1].title}</span>
        <span slot="desc">{data[0].valueBlocks[1].description}</span>
      </Card>
      
      <Card size="sm">
        <Fragment slot="image">
          <!-- // svg image. cannot use <picture/> as of now -->
          <Image
            src={IntegrationImg}
            alt="Feature image"
            width="909"
            height="823"
            class="h-full w-full object-contain"
            loading="lazy"
          />
        </Fragment>
        <span slot="badge">{data[0].valueBlocks[2].heading}</span>
        <span slot="title">{data[0].valueBlocks[2].title}</span>
        <span slot="desc">{data[0].valueBlocks[2].description}</span>
      </Card>
    </div>



      <!-- FeatureBlock.astro -->
    
      <div class="grid place-items-center">
        {data[0].featureBlocks.map((block) => (
          <div class="grid md:grid-cols-2 py-10">
            <div class="grid place-items-center pb-10 md:pb-0 md:order-2">
              <Picture
                src={FeatureImg1}
                alt="Feature Image"
                formats={["avif", "webp"]}
                loading="lazy"
              />
            </div>
            <div class="grid place-items-center">
              <div class="max-w-lg">
                <Badge color="purple" class="-ml-px">{block.heading}</Badge>
                <h3 class="text-2xl font-medium mt-4 [text-wrap:balance]">
                  {block.title}
                </h3>
                <p class="mt-4 text-slate-600 [text-wrap:balance]">
                  {block.description}
                </p>
                <ul class="grid mt-6 text-left gap-y-4">
                  {block.bulletPoints.map((point) => (
                    <li class="flex items-center gap-3 text-neutral-800">
                      <Icon name="ph:check-circle-fill" class="w-5 h-5" />
                      <span class="text-sm">{point}</span>
                    </li>
                  ))}
                </ul>
                <div class="flex items-center gap-4 mt-6">
                  {block.buttons?.map((button, index) => {
                    if (index === 0) {
                      return (
                        <Link href={button.link} size="sm" class="inline-flex items-center group gap-px">
                          <span>{button.text}</span>
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 20 20"
                            fill="currentColor"
                            class="w-4 h-4 mt-px group-hover:translate-x-1 transition-transform">
                            <path
                              fill-rule="evenodd"
                              d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z"
                              clip-rule="evenodd"></path>
                          </svg>
                        </Link>
                      );
                    } else {
                      return (
                        <a 
                          href={button.link} 
                          class="text-sm px-2 transition py-1 text-slate-600 hover:text-indigo-600 focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-indigo-500 focus-visible:outline-none focus-visible:shadow-outline-indigo rounded-full">
                          {button.text}
                        </a>
                      );
                    }
                  })}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
      

    <div class="mt-24 max-w-3xl mx-auto flex flex-col items-center justify-center">
      <Badge color="purple">{data[0].featureHeading}</Badge>
      <h2 class="text-4xl lg:text-5xl font-bold lg:tracking-tight mt-4 text-center">
        {data[0].featureTitle}
      </h2>
      <p class="text-lg mt-4 text-slate-600 text-center [text-wrap:pretty]">
        {data[0].featureAssurance}
      </p>
    </div>

    <div class="grid sm:grid-cols-2 md:grid-cols-3 mt-16 gap-8 md:gap-16">
      {
        features.map((item) => (
          <div class="flex flex-col gap-4 items-start group hover:bg-slate-50 hover:border-slate-100 border border-transparent rounded-lg transition-all md:-m-5 p-5">
            <div class="mt-1 bg-indigo-50 border shadow shadow-indigo-100/50 border-indigo-100 transition-colors rounded-lg grid place-items-center  p-2 w-10 h-10 shrink-0">
              <Icon class="text-indigo-500" name={item.icon} size="24" />
            </div>
            <div>
              <h3 class="font-semibold text-lg">{item.title}</h3>
              <p class="text-slate-500 mt-2 leading-relaxed">{item.description}</p>
            </div>
          </div>
        ))
      }
    </div>

  
    <div class="mt-24 max-w-3xl mx-auto flex flex-col items-center justify-center"></div>

  </Container>

  <Container>
    <Sectionhead>
      <Fragment slot="title">FAQ</Fragment>
      <Fragment slot="desc">Frequently asked questions</Fragment>
    </Sectionhead>
  
    <div class="grid divide-y divide-neutral-200 max-w-xl mx-auto mt-8">
      {faq.map(item => (
        <div class="py-5">
          <details class="group">
            <summary class="flex justify-between items-center font-medium cursor-pointer list-none">
              <span>{item.question}</span>
              <span class="transition group-open:rotate-180">
                <ArrowIcon />
              </span>
            </summary>
            <p class="text-neutral-600 mt-3 group-open:animate-fadeIn">
              {item.answer}
            </p>
          </details>
        </div>
      ))}
    </div>
  </Container>
  

  <Cta />
</Layout>

