---

import { getCollection } from "astro:content";
import Badge from "@components/ui/badge.astro";
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";
import Sectionhead from "@components/sectionhead.astro";
import Link from "@components/ui/link.astro";
import Cta from "@components/cta.astro";
import Card from "@components/card.astro";

import { Icon } from "astro-icon";
import ArrowIcon from "@components/ui/icons/arrow.astro"

import Logos from "@components/logos.astro";
import heroImage from "../../assets/hero-screenshot.png";
import IntegrationImg from "../../assets/integrations.svg?url";
import FeatureImgOne from "../../assets/features/2.png";
import FeatureImgTwo from "../../assets/features/2.png";
import FeatureImgThree from "../../assets/features/3.png";
import FeatureImg1 from "../../assets/features/6.png";
import FeatureImg2 from "../../assets/features/2.png";
import { Picture, Image } from "astro:assets";
import EmployeeImg from "../../assets/employee.jpg";
import LottieAnimation from "astro-integration-lottie/Lottie.astro";
import Education from "../../assets/features/education.svg";
import AutomatedMarketing from "../../assets/features/automated-marketing.svg";
import NetworkServerManagement from "../../assets/features/network-server-endpoint-management.svg";
import DashboardDevelopment from "../../assets/features/dashboard-development.png";

const { nomargin } = Astro.props;

// Filter team entries with 'draft: false' & date before current date
const publishedTeamMembers = await getCollection("team", ({ data }) => {
  return !data.draft && data.publishDate < new Date();
});

const Experience = [
{
    "title": "Helpdesk",
    "description": "Streamline Support Queries",
    "icon": "fluent:question-circle-24-regular",
    "link": "/app/experience/help-desk",
    "color": "indigo"
  },
  {
    "title": "Live Chat",
    "description": "Engage Customers Instantly",
    "icon": "ph:chats-duotone",
    "link": "/app/experience/live-chat",
    "color": "indigo"
  },
  {
    "title": "Feedback",
    "description": "Gather Valuable Feedback",
    "icon": "ph:arrows-in-cardinal-duotone",
    "link": "/app/experience/feedback",
    "color": "indigo"
  },
  {
    "title": "Forum",
    "description": "Foster Community Engagement",
    "icon": "ph:chat-dots-duotone",
    "link": "/app/experience/forum",
    "color": "indigo"
  },
  {
    "title": "Loyalty",
    "description": "Build Customer Loyalty",
    "icon": "ph:heart-duotone",
    "link": "/app/experience/loyalty",
    "color": "indigo"
  },
  {
    "title": "Appointments",
    "description": "Manage Customer Appointments",
    "icon": "ph:clock-clockwise-duotone",
    "link": "/app/experience/appointments",
    "color": "indigo"
  },
];

const data = [
  {
    "mainHeading": "Elevate Your Service",
    "subtext": "Transform customer support with efficient operations and instant insights.",
    "headingButtons": [
      {
        "text": "Get Started",
        "link": "/contact"
      },
      {
        "text": "View Pricing",
        "link": "/pricing"
      }
    ],
    "sectionHeading": "Empress for Experience",
    "offering": {
      "title": "Streamline Support and Optimize Customer Assistance",
      "subtext": "Centralize, update, and swiftly retrieve vital information, ensuring your users always have answers at their fingertips."
    },
    "valueBlocks": [
    {
        "heading": "Empress OS",
        "title": "Streamline Your Messaging",
        "description": "Revolutionize customer support through centralized information management, team collaboration, and streamlined workflows. "
    },
    {
        "heading": "Empress Chat",
        "title": "Enhance Your Support",
        "description": "Connect your team with tools, provide swift responses, and enhance both internal and external communication."
    },
    {
        "heading": "Empress Insights",
        "title": "Boost Service Metrics",
        "description": "Gain insights into customer feedback, identify areas of improvement, and make data-informed decisions."
    }
  ],
    "featureBlocks": [
    {
    "heading": "OS for Customer Support",
    "title": "Modernize Your Customer Support Strategy",
    "description": "A cutting-edge unified platform crafted to revolutionize customer support by centralizing information, promoting synergy among teams, and offering seamless workflows.",
    "bulletPoints": [
    "Centralize support information for easy access",
"Collaborate in real time for quicker issue resolution",
"Automate support to free up focus for growth"
    ],
    "buttons": [
      {
        "text": "Get Started",
        "link": "/contact"
      },
      {
      "text": "View Pricing",
      "link": "/pricing"
    }
    ]
},
{
    "heading": "Chat for Customer Support",
    "title": "Elevate, Automate, and Optimize Support Interactions",
    "description": "An intelligent chatbot engineered to seamlessly connect your support team with the powerful tools of Empress OS, ensuring swift and effective communication both internally and with customers.",
    "bulletPoints": [
    "Quickly resolve common inquiries to cut wait times",
"Unify team communication for better coordination",
"Improve customer interactions with personalized, efficient replies"
    ],
    "buttons": [
      {
        "text": "Get Started",
        "link": "/contact"
      },
      {
      "text": "View Pricing",
      "link": "/pricing"
    }
    ]
},
{
    "heading": "Insights for Customer Support",
    "title": "Drive Support Excellence Through Analytics",
    "description": "Harness the power of sophisticated analytics and intuitive dashboards tailored for customer support. Transform raw data into actionable strategies, enabling your team to anticipate needs, spot trends, and make confident decisions.",
    "bulletPoints": [
    "Track customer feedback and trends instantly",
"Pinpoint and improve support bottlenecks",
"Allocate resources effectively using data insights"
    ],
    "buttons": [
      {
        "text": "Get Started",
        "link": "/contact"
      },
      {
      "text": "View Pricing",
      "link": "/pricing"
    }
    ]
}

    ],
    "getStartedSection": {
      "badge": "Additional Features",
      "title": "Start Supporting with Empress",
      "description": "Launch top-notch customer support easily with all the right tools you need."
    },
    "featureHeading": "Empress for Customer Support",
    "featureTitle": "We're Here to Support You",
    "featureAssurance": "Empress delivers a data-driven approach, ensuring efficient, responsive support and enhancing customer loyalty."
  }
];

const features = [
  {
    "title": "Streamline",
    "description": "Enhance customer support",
    "icon": "fluent:flash-24-regular",
    "link": "/features/streamline"
  },
  {
    "title": "Analyze",
    "description": "Understand customer needs",
    "icon": "fluent:cellular-data-1-24-regular",
    "link": "/features/analyze"
  },
  {
    "title": "Automate",
    "description": "Streamline support tasks",
    "icon": "fluent:bot-24-regular",
    "link": "/features/automate"
  },
  {
    "title": "Permission",
    "description": "Control support access",
    "icon": "fluent:lock-24-regular",
    "link": "/features/permission"
  },
  {
    "title": "Chat",
    "description": "Quick customer interaction",
    "icon": "fluent:chat-multiple-24-regular",
    "link": "/features/chat"
  },
  {
    "title": "Forecast",
    "description": "Anticipate support needs",
    "icon": "fluent:weather-sunny-low-24-regular",
    "link": "/features/forecast"
  },
  {
    "title": "Collaborate",
    "description": "Coordinate support teams",
    "icon": "fluent:people-team-24-regular",
    "link": "/features/collaborate"
  },
  {
    "title": "Integrate",
    "description": "Unify support tools",
    "icon": "fluent:plug-connected-24-regular",
    "link": "/features/integrate"
  }
];



const faq = [
  {
    question: "How does Empress OS streamline customer support operations?",
    answer: "Empress OS centralizes information management and enables team collaboration, creating streamlined workflows. It helps teams access vital information quickly and efficiently, ensuring customers always have answers at their fingertips."
  },
  {
    question: "What capabilities does Empress Chat offer for customer support?",
    answer: "Empress Chat provides instant responses to common customer inquiries, reduces wait times, and supports team coordination with unified communication tools, resulting in tailored and efficient customer experiences."
  },
  {
    question: "In what ways can Empress Insights boost my customer service metrics?",
    answer: "Empress Insights gives you real-time visibility into customer feedback and service trends, helping you identify areas for improvement, optimize resource allocation, and make data-informed decisions to enhance support services."
  },
  {
    question: "What does Empress offer to modernize customer support strategies?",
    answer: "Empress provides a unified platform that centralizes customer support infomation, fosters real-time team collaboration, and automates workflows, allowing teams to focus more on growth and customer satisfaction."
  },
  {
    question: "How can Messenger-assisted support improve customer interactions?",
    answer: "By leveraging platforms like Messenger for real-time support, Empress ensures swift and effective assistance, thereby improving response times and overall customer satisfaction."
  },
  {
    question: "What solutions does Empress provide for supporting global customers?",
    answer: "Empress overcomes language barriers with AI-assisted translations, making sure all users receive support in their preferred language, which enriches the customer experience and fosters global user engagement."
  },
  {
    question: "How does the integrated tools suite enhance customer support?",
    answer: "The integrated tools suite optimizes communication and user engagement through a comprehensive set of tools, ensuring a smooth and efficient support experience for both the support team and the customers."
  }
];


const featureBlocks = data[0].featureBlocks;

---


<Layout title="Build" footerMargin={false}>
  <div class="overflow-x-clip mt-20">
  </Sectionhead>

  <Container>
    <div>
      <div class="mt-24 max-w-3xl mx-auto flex flex-col items-center justify-center ">
        <Badge color="purple">{data[0].featureHeading}</Badge>
        <h2 class="text-4xl lg:text-5xl font-bold lg:tracking-tight mt-4 text-center">
          {data[0].mainHeading}
        </h2>
        <p class="text-lg mt-4 text-slate-600 text-center [text-wrap:pretty]">
          {data[0].subtext}
        </p>
      </div>
      <div class="grid sm:grid-cols-2 md:grid-cols-3 mt-16 gap-6 md:gap-16">
        {
          Experience.map((item) => (
            <a href={item.link} 
               class={`focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-${item.color}-500 transition-transform hover:scale-105`}>
              <div class="flex items-center group hover:bg-slate-50 rounded-xl transition-all md:-m-5 p-5 border border-gray-200 shadow-sm">
                <div class={`bg-${item.color}-100 rounded-lg grid place-items-center p-2 w-12 h-12 shrink-0 mr-6`}>
                  {/* Use the original icon coloring method */}
                  <Icon class={`text-${item.color}-500`} name={item.icon} size="28" />
                </div>
                <div class="flex flex-col justify-center text-left" style="color: #1e293b;">
                  <h3 class="font-semibold text-md">{item.title}</h3>
                  <p class="text-slate-500">{item.description}</p>
                </div>
              </div>
            </a>
          ))
        }
      </div> 
      
    </div>

  </Container>

  <Container>

  

    <!-- Feature 1 -->

    <div class="grid md:grid-cols-2 py-10">
      <div class="grid place-items-center">
        <div class="max-w-lg">
          <Badge color="purple" class="-ml-px">{data[0].featureBlocks[0].heading}</Badge>
          <h3 class="text-4xl font-bold mt-4 [text-wrap:balance]">
            {data[0].featureBlocks[0].title}
          </h3>
          <p class="mt-4 text-slate-600 [text-wrap:balance]">
            {data[0].featureBlocks[0].description}
          </p>
          <ul class="grid mt-6 text-left gap-y-4">
            {data[0].featureBlocks[0].bulletPoints.map((point) => (
              <li class="flex items-center gap-3 text-neutral-800">
                <Icon name="ph:check-circle-fill" class="w-5 h-5" />
                <span class="text-sm">{point}</span>
              </li>
            ))}
          </ul>
          <div class="flex items-center gap-4 mt-10">
            {data[0].featureBlocks[0].buttons?.map((button, index) => {
              if (index === 0) {
                return (
                  <a href={button.link} class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-normal rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-600 shadow-md transition ease-in-out duration-150">
                    <span>{button.text}</span>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform">
                      <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd"></path>
                    </svg>
                  </a>
                );
              } else {
                return (
                  <a href={button.link} class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-normal rounded-md bg-white text-slate-600 hover:text-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 shadow-md transition ease-in-out duration-150">
                    {button.text}
                  </a>
                );
              }
            })}
          </div>          
        </div>
      </div>
  
      <div class="container">
        <LottieAnimation id="lottie" src="../../../../job-announcement.json" autoplay="true" style="width: 100%; height: auto;"/>
      </div>
    </div>

    <!-- Feature 2 -->
    <div class="grid md:grid-cols-2 py-10">
      <div class="">
        <LottieAnimation id="lottie" src="../../../../global-market-2.json" autoplay="true" style="width: 100%; height: auto;"/>
      </div>

      <div class="grid place-items-center">
        <div class="max-w-lg">
          <Badge color="purple" class="-ml-px">{data[0].featureBlocks[1].heading}</Badge>
          <h3 class="text-4xl font-bold mt-4 [text-wrap:balance]">
            {data[0].featureBlocks[1].title}
          </h3>
          <p class="mt-4 text-slate-600 [text-wrap:balance]">
            {data[0].featureBlocks[1].description}
          </p>
          <ul class="grid mt-6 text-left gap-y-4">
            {data[0].featureBlocks[1].bulletPoints.map((point) => (
              <li class="flex items-center gap-3 text-neutral-800">
                <Icon name="ph:check-circle-fill" class="w-5 h-5" />
                <span class="text-sm">{point}</span>
              </li>
            ))}
          </ul>
          <div class="flex items-center gap-4 mt-10">
            {data[0].featureBlocks[0].buttons?.map((button, index) => {
              if (index === 0) {
                return (
                  <a href={button.link} class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-normal rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-600 shadow-md transition ease-in-out duration-150">
                    <span>{button.text}</span>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform">
                      <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd"></path>
                    </svg>
                  </a>
                );
              } else {
                return (
                  <a href={button.link} class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-normal rounded-md bg-white text-slate-600 hover:text-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 shadow-md transition ease-in-out duration-150">
                    {button.text}
                  </a>
                );
              }
            })}
          </div> 
        </div>
      </div>
    </div>

  <!-- Feature 3 -->

  <div class="grid md:grid-cols-2 py-10">

    <div class="grid place-items-center">
      <div class="max-w-lg">
        <Badge color="purple" class="-ml-px">{data[0].featureBlocks[2].heading}</Badge>
        <h3 class="text-4xl font-bold mt-4 [text-wrap:balance]">
          {data[0].featureBlocks[2].title}
        </h3>
        <p class="mt-4 text-slate-600 [text-wrap:balance]">
          {data[0].featureBlocks[2].description}
        </p>
        <ul class="grid mt-6 text-left gap-y-4">
          {data[0].featureBlocks[2].bulletPoints.map((point) => (
            <li class="flex items-center gap-3 text-neutral-800">
              <Icon name="ph:check-circle-fill" class="w-5 h-5" />
              <span class="text-sm">{point}</span>
            </li>
          ))}
        </ul>
        <div class="flex items-center gap-4 mt-10">
          {data[0].featureBlocks[0].buttons?.map((button, index) => {
            if (index === 0) {
              return (
                <a href={button.link} class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-normal rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-600 shadow-md transition ease-in-out duration-150">
                  <span>{button.text}</span>
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform">
                    <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd"></path>
                  </svg>
                </a>
              );
            } else {
              return (
                <a href={button.link} class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-normal rounded-md bg-white text-slate-600 hover:text-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 shadow-md transition ease-in-out duration-150">
                  {button.text}
                </a>
              );
            }
          })}
        </div> 
      </div>
    </div>
    <div class="">
      <LottieAnimation id="lottie" src="../../../../data-analysis-2.json" autoplay="true" style="width: 100%; height: auto;"/>
    </div>
  </div>

  </Container>

  <Container>

    <div
    class:list={[
      "max-w-4xl mx-auto flex flex-col items-center justify-center",
      !nomargin && "mt-24",
    ]}>
    <Badge color="purple">{data[0].getStartedSection.badge}</Badge>
    <h2 class="text-4xl lg:text-5xl font-bold lg:tracking-tight mt-4 text-center">
      {data[0].getStartedSection.title}
    </h2>
    <p class="text-lg mt-4 text-slate-600 text-center [text-wrap:pretty]">
      {data[0].getStartedSection.description}
    </p>
  </div>

  <div class="grid sm:grid-cols-2 md:grid-cols-4 mt-16 gap-8 md:gap-10">
    {
      features.map((item) => (
        <a href={item.link} class="focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          <div class="flex flex-col items-center group hover:bg-slate-50 hover:shadow-lg rounded-lg transition-all p-6 text-center shadow-lg bg-white">
            <div class="bg-indigo-50 border shadow-sm border-indigo-100 transition-colors rounded-lg grid place-items-center p-4 mb-5 w-16 h-16 shrink-0">
              <Icon class="text-indigo-500" name={item.icon} size="32" />
            </div>
            <h3 class="font-semibold text-lg text-gray-900">{item.title}</h3>
            <p class="text-slate-500 mt-2 text-base leading-relaxed">{item.description}</p>
          </div>
        </a>
      ))
    }
  </div>


  <div class="flex justify-center items-center mt-20"> 
    <a href="/features" class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-normal rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-600 shadow-md transition ease-in-out duration-150 w-full max-w-xs" style="box-shadow: 0 4px 6px rgba(90, 49, 196, 0.25);"> <!-- Added classes and inline styles to match the look -->
      <span>Explore All Features</span>
      <svg
        xmlns="http://www.w3.org/2000/svg" 
        viewBox="0 0 20 20"
        fill="currentColor"
        class="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform">
        <path
          fill-rule="evenodd"
          d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z"
          clip-rule="evenodd"></path>
      </svg>
    </a>
  </div>

</Container>


  
  
    <div class="mt-24 max-w-3xl mx-auto flex flex-col items-center justify-center"></div>

  <Container>
    <Sectionhead>
      <Fragment slot="title">FAQ</Fragment>
      <Fragment slot="desc">Frequently asked questions</Fragment>
    </Sectionhead>
  
    <div class="grid divide-y divide-neutral-200 max-w-xl mx-auto mt-8">
      {faq.map(item => (
        <div class="py-5">
          <details class="group">
            <summary class="flex justify-between items-center font-medium cursor-pointer list-none">
              <span>{item.question}</span>
              <span class="transition group-open:rotate-180">
                <ArrowIcon />
              </span>
            </summary>
            <p class="text-neutral-600 mt-3 group-open:animate-fadeIn">
              {item.answer}
            </p>
          </details>
        </div>
      ))}
    </div>
  </Container>
  

  <Cta />
</Layout>

