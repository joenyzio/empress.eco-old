---

import { getCollection } from "astro:content";
import Badge from "@components/ui/badge.astro";
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";
import Sectionhead from "@components/sectionhead.astro";
import Link from "@components/ui/link.astro";
import Cta from "@components/cta.astro";
import Card from "@components/card.astro";

import { Icon } from "astro-icon";
import ArrowIcon from "@components/ui/icons/arrow.astro"

import Logos from "@components/logos.astro";
import heroImage from "../../../assets/hero-screenshot.png";
import IntegrationImg from "../../../assets/integrations.svg?url";
import FeatureImgOne from "../../../assets/features/2.png";
import FeatureImgTwo from "../../../assets/features/2.png";
import FeatureImgThree from "../../../assets/features/3.png";
import FeatureImg1 from "../../../assets/features/6.png";
import FeatureImg2 from "../../../assets/features/2.png";
import { Picture, Image } from "astro:assets";
import EmployeeImg from "../../../assets/employee.jpg";
import LottieAnimation from "astro-integration-lottie/Lottie.astro";
import ECommerce from "../../../assets/features/buyer-standing-in-front-of-giant-smartphone-and-buying-goods-on-internet-store.svg";
import AutomatedMarketing from "../../../assets/features/automated-marketing.svg";
import NetworkServerManagement from "../../../assets/features/network-server-endpoint-management.svg";
import Logo from "../../../assets/logo-full.png";
import DashboardDevelopment from "../../../assets/features/dashboard-development.png";


// Filter team entries with 'draft: false' & date before current date
const publishedTeamMembers = await getCollection("team", ({ data }) => {
  return !data.draft && data.publishDate < new Date();
});

const { nomargin } = Astro.props;

const templates = [
  {
    "title": "Survey Builder",
    "description": "Create Custom Surveys",
    "icon": "fluent:star-24-regular",
    "link": "/templates/survey-builder"
  },
  {
    "title": "Net Promoter Score (NPS)",
    "description": "Measure Customer Loyalty",
    "icon": "fluent:star-24-regular",
    "link": "/templates/net-promoter-score"
  },
  {
    "title": "Customer Satisfaction (CSAT)",
    "description": "Assess Satisfaction",
    "icon": "fluent:star-24-regular",
    "link": "/templates/customer-satisfaction"
  },
  {
    "title": "Employee Engagement Surveys",
    "description": "Evaluate Team Satisfaction",
    "icon": "fluent:group-24-regular",
    "link": "/templates/employee-engagement-surveys"
  },
  {
    "title": "Market Research Surveys",
    "description": "Gather Market Insights",
    "icon": "fluent:star-24-regular",
    "link": "/templates/market-research-surveys"
  },
  {
    "title": "Survey Analytics",
    "description": "Analyze Survey Responses",
    "icon": "fluent:star-24-regular",
    "link": "/templates/survey-analytics"
  }
];



const data = [
  {
    "mainHeading": "Survey for Insights",
    "subtext": "Efficiently gather customer feedback.",
    "headingButtons": [
      {
        "text": "Create Surveys",
        "link": "/contact"
      },
      {
        "text": "View Pricing",
        "link": "/pricing"
      }
    ],
    "sectionHeading": "Empress for Surveys",
    "offering": {
      "title": "Harness Customer Feedback to Drive Growth",
      "subtext": "Utilize targeted surveys to understand customer needs, measure satisfaction, and tailor your services to the market demand."
    },
    "valueBlocks": [
      {
        "heading": "Empress Surveys OS",
        "title": "Streamline Feedback Collection",
        "description": "Deploy efficient survey strategies to gather meaningful feedback that's integral for business intelligence and customer relationship management."
      },
      {
        "heading": "Empress Surveys Chat",
        "title": "Interact and Engage",
        "description": "Initiate real-time dialogue with customers to capture immediate feedback and provide a responsive platform for their voices to be heard."
      },
      {
        "heading": "Empress Surveys Insights",
        "title": "Act on Data-Driven Insights",
        "description": "Analyze feedback for deeper insights into customer preferences, satisfaction levels, and market trends to drive informed decision-making."
      }
    ],
    "featureBlocks": [
      {
        "heading": "OS for Surveys",
        "title": "Centralize Your Feedback Mechanisms",
        "description": "Organize and manage all customer feedback channels from a single hub, making it easier to action on the insights you gather.",
        "bulletPoints": [
          "Aggregate feedback from multiple touchpoints",
          "Automate survey distribution and collection",
          "Integrate feedback data with business analytics"
        ],
        "buttons": [
          {
            "text": "Get Started with Surveys OS",
            "link": "/contact-surveys-os"
          },
          {
            "text": "Surveys OS Pricing",
            "link": "/pricing-surveys-os"
          }
        ]
      },
      {
        "heading": "Chat for Surveys",
        "title": "Engage Customers in Conversational Feedback",
        "description": "Make feedback collection a conversational and engaging experience for customers with our live chat survey integration.",
        "bulletPoints": [
          "Facilitate instant feedback collection during interactions",
          "Personalize the survey experience to increase response rates",
          "Implement real-time adjustments based on live feedback"
        ],
        "buttons": [
          {
            "text": "Activate Surveys Chat",
            "link": "/contact-surveys-chat"
          },
          {
            "text": "Surveys Chat Pricing",
            "link": "/pricing-surveys-chat"
          }
        ]
      },
      {
        "heading": "Insights for Surveys",
        "title": "Inform Your Strategy with Customer Feedback Analytics",
        "description": "Transform survey results into actionable insights that can guide your customer experience strategy and drive business growth.",
        "bulletPoints": [
          "Analyze customer feedback trends over time",
          "Correlate satisfaction scores with business outcomes",
          "Identify areas for product and service enhancement"
        ],
        "buttons": [
          {
            "text": "Explore Surveys Insights",
            "link": "/contact-surveys-insights"
          },
          {
            "text": "Surveys Insights Pricing",
            "link": "/pricing-surveys-insights"
          }
        ]
      }
    ],
    "featureHeading": "Empress for Surveys",
    "featureTitle": "Optimize Your Business with Customer-Centric Insights",
    "featureAssurance": "Our comprehensive survey tools are designed to give you a deeper understanding of your customers, enabling continuous improvement and a competitive edge."
  }
];


const features = [
  {
    "title": "Multi-Channel Survey Distribution",
    "description": "Distribute surveys across various channels like email, social media, and your website to reach your audience wherever they are.",
    "icon": "fluent:share-24-regular",
  },
  {
    "title": "Custom Survey Branding",
    "description": "Align the look and feel of your surveys with your brand identity for a seamless customer experience.",
    "icon": "fluent:design-ideas-24-regular",
  },
  {
    "title": "Survey Logic and Branching",
    "description": "Create intelligent surveys that adapt based on responses, leading to more relevant follow-up questions and richer data.",
    "icon": "fluent:branch-fork-24-regular",
  },
  {
    "title": "Anonymous Feedback Collection",
    "description": "Provide options for anonymity to encourage honest and candid responses, helping you gather true customer sentiment.",
    "icon": "fluent:person-feedback-24-regular",
  },
  {
    "title": "Real-Time Results Dashboard",
    "description": "Access a dynamic dashboard that updates with real-time responses, allowing for immediate insight into customer feedback.",
    "icon": "fluent:data-histogram-24-regular",
  },
  {
    "title": "Automated Response Actions",
    "description": "Set up automated actions based on survey responses to quickly address customer concerns and acknowledge positive feedback.",
    "icon": "fluent:bot-24-regular",
  }
];

const faq = [
  {
    "question": "How can Empress Surveys OS help streamline my feedback collection?",
    "answer": "Empress Surveys OS centralizes all your customer feedback mechanisms, automating distribution and collection, and integrating the data with your business analytics for comprehensive insights."
  },
  {
    "question": "Can I personalize surveys to match my brand?",
    "answer": "Absolutely! With Custom Survey Branding, you can align the design of your surveys with your brandâ€™s look and feel to ensure a consistent and professional customer experience."
  },
  {
    "question": "What is survey logic and branching?",
    "answer": "Survey logic and branching allow you to create dynamic surveys that change based on how respondents answer. This leads to more relevant questions for the customer and more precise data for you."
  },
  {
    "question": "Is it possible to collect anonymous feedback?",
    "answer": "Yes, you can enable anonymity options in your surveys with Empress Surveys, which can lead to more honest and valuable responses from your customers."
  },
  {
    "question": "How can I view and analyze the survey results?",
    "answer": "Our Real-Time Results Dashboard provides a live update of survey responses, complete with analytics tools to help you make sense of the data immediately."
  },
  {
 "question": "How does the Empress Surveys Chat enhance customer interactions?",
    "answer": "Empress Surveys Chat integrates directly with your live chat systems, allowing you to gather instant feedback during customer interactions for real-time engagement and service adjustment."
  },
  {
    "question": "What insights can I gain from Empress Surveys Insights?",
    "answer": "Empress Surveys Insights transforms raw feedback into actionable intelligence, helping you understand customer behavior, measure satisfaction, and identify strategic enhancement opportunities for your product or service."
  }
];





const featureBlocks = data[0].featureBlocks;

---

<Layout title="Quote" footerMargin={false}>

  <Container>
    <div>
      <div class="mt-24 max-w-3xl mx-auto flex flex-col items-center justify-center">
        <Badge color="purple">{data[0].featureHeading}</Badge>
        <h2 class="text-4xl lg:text-5xl font-bold lg:tracking-tight mt-4 text-center">
          {data[0].mainHeading}
        </h2>
        <p class="text-lg mt-4 text-slate-600 text-center [text-wrap:pretty]">
          {data[0].subtext}
        </p>
      </div>
      <div class="mt-6 flex justify-center gap-3">
        <Link href={data[0].headingButtons[0].link} class="flex gap-1 items-center justify-center bg-brand" rel="noopener">
          {data[0].headingButtons[0].text}
        </Link>
  
        <Link size="lg" style="outline" rel="noopener" href={data[0].headingButtons[1].link} class="flex gap-1 items-center justify-center border-brand text-brand">
          {data[0].headingButtons[1].text}
        </Link>
      </div>
    </div>
    <div class="w-full overflow-hidden py-3 mt-20">
      <Picture src={Logo} alt="Astronaut in the air" formats={["avif", "webp"]} sizes="100vw" width="100vw" loading="eager" fetchpriority="high" />
    </div>
  </Container>
  
  
  </div>
  

  <Container>
  
    <div class="mt-24 max-w-3xl mx-auto flex flex-col items-center justify-center">
      <Badge color="purple">{data[0].sectionHeading}</Badge>
      <h2 class="text-4xl lg:text-5xl font-bold lg:tracking-tight mt-4 text-center">
        {data[0].offering.title}
      </h2>
      <p class="text-lg mt-4 text-slate-600 text-center [text-wrap:pretty]">
        {data[0].offering.subtext}
      </p>
    </div>

    <div class="grid sm:grid-cols-2 md:grid-cols-3 mt-16 gap-8 md:gap-16">
      {
        templates.map((item) => (
          <a href={item.link} class="focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            <div class="flex flex-col gap-4 items-center group hover:bg-slate-50 hover:shadow-md rounded-lg transition-all md:-m-5 p-5 text-center shadow">
              <div class="bg-indigo-50 border shadow border-indigo-100 transition-colors rounded-lg grid place-items-center p-2 w-10 h-10 shrink-0">
                <Icon class="text-indigo-500" name={item.icon} size="24" />
              </div>
              <div>
                <h3 class="font-semibold text-lg">{item.title}</h3>
                <p class="text-slate-500 mt-2 leading-relaxed">{item.description}</p>
              </div>
            </div>
          </a>
        ))
      }
    </div>

    <!-- Feature 1 -->

    <div class="grid md:grid-cols-2 py-10">
      <div class="grid place-items-center">
        <div class="max-w-lg">
          <Badge color="purple" class="-ml-px">{data[0].featureBlocks[0].heading}</Badge>
          <h3 class="text-4xl font-bold mt-4 [text-wrap:balance]">
            {data[0].featureBlocks[0].title}
          </h3>
          <p class="mt-4 text-slate-600 [text-wrap:balance]">
            {data[0].featureBlocks[0].description}
          </p>
          <ul class="grid mt-6 text-left gap-y-4">
            {data[0].featureBlocks[0].bulletPoints.map((point) => (
              <li class="flex items-center gap-3 text-neutral-800">
                <Icon name="ph:check-circle-fill" class="w-5 h-5" />
                <span class="text-sm">{point}</span>
              </li>
            ))}
          </ul>
          <div class="flex items-center gap-4 mt-10">
            {data[0].featureBlocks[0].buttons?.map((button, index) => {
              if (index === 0) {
                return (
                  <a href={button.link} class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-normal rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-600 shadow-md transition ease-in-out duration-150">
                    <span>{button.text}</span>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform">
                      <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd"></path>
                    </svg>
                  </a>
                );
              } else {
                return (
                  <a href={button.link} class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-normal rounded-md bg-white text-slate-600 hover:text-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 shadow-md transition ease-in-out duration-150">
                    {button.text}
                  </a>
                );
              }
            })}
          </div>  
        </div>
      </div>
  
      <div class="container">
        <LottieAnimation id="lottie" src="../../../../../../business-technology.json" autoplay="true" style="width: 100%; height: auto;"/>
      </div>
    </div>


    <!-- Feature 2 -->
    <div class="grid md:grid-cols-2 py-10">
      <div class="grid place-items-center">
        <div class="max-w-lg">
          <Badge color="purple" class="-ml-px">{data[0].featureBlocks[1].heading}</Badge>
          <h3 class="text-4xl font-bold mt-4 [text-wrap:balance]">
            {data[0].featureBlocks[1].title}
          </h3>
          <p class="mt-4 text-slate-600 [text-wrap:balance]">
            {data[0].featureBlocks[1].description}
          </p>
          <ul class="grid mt-6 text-left gap-y-4">
            {data[0].featureBlocks[1].bulletPoints.map((point) => (
              <li class="flex items-center gap-3 text-neutral-800">
                <Icon name="ph:check-circle-fill" class="w-5 h-5" />
                <span class="text-sm">{point}</span>
              </li>
            ))}
          </ul>
          <div class="flex items-center gap-4 mt-10">
            {data[0].featureBlocks[0].buttons?.map((button, index) => {
              if (index === 0) {
                return (
                  <a href={button.link} class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-normal rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-600 shadow-md transition ease-in-out duration-150">
                    <span>{button.text}</span>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform">
                      <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd"></path>
                    </svg>
                  </a>
                );
              } else {
                return (
                  <a href={button.link} class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-normal rounded-md bg-white text-slate-600 hover:text-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 shadow-md transition ease-in-out duration-150">
                    {button.text}
                  </a>
                );
              }
            })}
          </div>  
        </div>
      </div>
  
      <div class="container">
        <LottieAnimation id="lottie" src="../../../../../../auto-chat.json" autoplay="true" style="width: 100%; height: auto;"/>
      </div>
    </div>

  <!-- Feature 3 -->

  <div class="grid md:grid-cols-2 py-10">

    <div class="grid place-items-center">
      <div class="max-w-lg">
        <Badge color="purple" class="-ml-px">{data[0].featureBlocks[2].heading}</Badge>
        <h3 class="text-4xl font-bold mt-4 [text-wrap:balance]">
          {data[0].featureBlocks[2].title}
        </h3>
        <p class="mt-4 text-slate-600 [text-wrap:balance]">
          {data[0].featureBlocks[2].description}
        </p>
        <ul class="grid mt-6 text-left gap-y-4">
          {data[0].featureBlocks[2].bulletPoints.map((point) => (
            <li class="flex items-center gap-3 text-neutral-800">
              <Icon name="ph:check-circle-fill" class="w-5 h-5" />
              <span class="text-sm">{point}</span>
            </li>
          ))}
        </ul>
        <div class="flex items-center gap-4 mt-10">
          {data[0].featureBlocks[0].buttons?.map((button, index) => {
            if (index === 0) {
              return (
                <a href={button.link} class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-normal rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-600 shadow-md transition ease-in-out duration-150">
                  <span>{button.text}</span>
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform">
                    <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd"></path>
                  </svg>
                </a>
              );
            } else {
              return (
                <a href={button.link} class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-normal rounded-md bg-white text-slate-600 hover:text-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 shadow-md transition ease-in-out duration-150">
                  {button.text}
                </a>
              );
            }
          })}
        </div>  
      </div>
    </div>
    <div class="">
      <LottieAnimation id="lottie" src="../../../../../../pie-chart-bar.json" autoplay="true" style="width: 100%; height: auto;"/>
    </div>
  </div>

    <div class="mt-24 max-w-3xl mx-auto flex flex-col items-center justify-center">
      <Badge color="purple">{data[0].featureHeading}</Badge>
      <h2 class="text-4xl lg:text-5xl font-bold lg:tracking-tight mt-4 text-center">
        {data[0].featureTitle}
      </h2>
      <p class="text-lg mt-4 text-slate-600 text-center [text-wrap:pretty]">
        {data[0].featureAssurance}
      </p>
    </div>

    <div class="grid sm:grid-cols-2 md:grid-cols-3 mt-16 gap-8 md:gap-16">
      {
        features.map((item) => (
          <div class="flex flex-col gap-4 items-start group hover:bg-slate-50 hover:border-slate-100 border border-transparent rounded-lg transition-all md:-m-5 p-5">
            <div class="mt-1 bg-indigo-50 border shadow shadow-indigo-100/50 border-indigo-100 transition-colors rounded-lg grid place-items-center  p-2 w-10 h-10 shrink-0">
              <Icon class="text-indigo-500" name={item.icon} size="24" />
            </div>
            <div>
              <h3 class="font-semibold text-lg">{item.title}</h3>
              <p class="text-slate-500 mt-2 leading-relaxed">{item.description}</p>
            </div>
          </div>
        ))
      }
    </div>

  
    <div class="mt-24 max-w-3xl mx-auto flex flex-col items-center justify-center"></div>

  </Container>

  <Container>
    <Sectionhead>
      <Fragment slot="title">FAQ</Fragment>
      <Fragment slot="desc">Frequently asked questions</Fragment>
    </Sectionhead>
  
    <div class="grid divide-y divide-neutral-200 max-w-xl mx-auto mt-8">
      {faq.map(item => (
        <div class="py-5">
          <details class="group">
            <summary class="flex justify-between items-center font-medium cursor-pointer list-none">
              <span>{item.question}</span>
              <span class="transition group-open:rotate-180">
                <ArrowIcon />
              </span>
            </summary>
            <p class="text-neutral-600 mt-3 group-open:animate-fadeIn">
              {item.answer}
            </p>
          </details>
        </div>
      ))}
    </div>
  </Container>
  

  <Cta />
</Layout>

